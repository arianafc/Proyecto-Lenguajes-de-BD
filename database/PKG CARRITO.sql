--CREACION DE PAQUETES PARA MANEJO DEL CARRITO
CREATE OR REPLACE PACKAGE PKG_CARRITO AS
PROCEDURE SP_GET_CARRITO_USUARIO (DATOS OUT SYS_REFCURSOR, VID IN NUMBER);
PROCEDURE SP_AGREGAR_ARTICULO_CARRITO (P_CARRITO IN NUMBER, P_PRODUCTO IN NUMBER, P_CANTIDAD IN NUMBER);
PROCEDURE SP_ELIMINAR_ARTICULO_CARRITO(
    P_ID IN NUMBER
);
PROCEDURE SP_EDITAR_ARTICULO_CARRITO(
    P_ID_ARTICULO IN NUMBER, 
    P_CANTIDAD IN NUMBER
);

FUNCTION FN_CONTAR_ARTICULOS_CARRITO (P_CARRITO IN NUMBER) RETURN NUMBER;

END PKG_CARRITO;

   
CREATE OR REPLACE PACKAGE BODY PKG_CARRITO AS
FUNCTION FN_CONTAR_ARTICULOS_CARRITO (P_CARRITO IN NUMBER) RETURN NUMBER 
AS
V_CONTAR NUMBER;
VMESS VARCHAR2(2000);
BEGIN
    SELECT COUNT(*) INTO V_CONTAR FROM ARTICULOS_CARRITO WHERE ID_CARRITO = P_CARRITO;
    RETURN V_CONTAR;
EXCEPTION
    WHEN OTHERS THEN
    VMESS := SQLERRM;
    INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (VMESS, 'CARRITO', USER, SYSDATE);
    RAISE_APPLICATION_ERROR(SQLCODE, SQLERRM);
END FN_CONTAR_ARTICULOS_CARRITO;



 PROCEDURE SP_GET_CARRITO_USUARIO (DATOS OUT SYS_REFCURSOR, VID IN NUMBER) AS
 VCOD NUMBER;
 VMESS VARCHAR2(600);
BEGIN
    OPEN DATOS FOR
    SELECT I.ID_PRODUCTO, I.ID_ARTICULO, I.CANTIDAD, P.NOMBRE, P.PRECIO, (I.CANTIDAD*P.PRECIO) AS SUBTOTAL
    FROM ARTICULOS_CARRITO I
    INNER JOIN PRODUCTOS P
    ON I.ID_PRODUCTO = P.ID_PRODUCTO
    WHERE I.ID_CARRITO = VID;
EXCEPTION
    WHEN OTHERS THEN
    VCOD := SQLCODE;
    VMESS:= SQLERRM;
    INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (VMESS, 'CARRITO', USER, SYSDATE);
    DBMS_OUTPUT.PUT_LINE(VCOD || ' ' ||  VMESS);
    RAISE_APPLICATION_ERROR(VCOD, VMESS);
END SP_GET_CARRITO_USUARIO;
  
PROCEDURE SP_AGREGAR_ARTICULO_CARRITO(
    P_CARRITO  IN NUMBER,
    P_PRODUCTO IN NUMBER,
    P_CANTIDAD IN NUMBER
) AS
    V_ID_ARTICULO NUMBER;
    VCOD NUMBER;
    VMESS VARCHAR2(600);
    VSQL VARCHAR2(1000);
    V_CONTAR NUMBER := 0;
    V_CANTIDAD NUMBER := 0;
BEGIN
    DBMS_OUTPUT.PUT_LINE('--- Iniciando SP_AGREGAR_ARTICULO_CARRITO ---');

    -- Verificar si ya existe el producto en el carrito
    SELECT COUNT(*) INTO V_CONTAR
    FROM ARTICULOS_CARRITO
    WHERE ID_PRODUCTO = P_PRODUCTO AND ID_CARRITO = P_CARRITO;

    DBMS_OUTPUT.PUT_LINE('Productos encontrados en carrito: ' || V_CONTAR);

    IF V_CONTAR = 0 THEN
        DBMS_OUTPUT.PUT_LINE('No existe, insertando nuevo artículo');

        SELECT SEQ_ARTICULO_CARRITO.NEXTVAL INTO V_ID_ARTICULO FROM DUAL;

        VSQL := '
            INSERT INTO ARTICULOS_CARRITO (ID_ARTICULO, ID_CARRITO, ID_PRODUCTO, CANTIDAD)
            VALUES (:idArticulo, :idCarrito, :idProducto, :cantidad)
        ';
        EXECUTE IMMEDIATE VSQL USING V_ID_ARTICULO, P_CARRITO, P_PRODUCTO, P_CANTIDAD;

        DBMS_OUTPUT.PUT_LINE('Insert exitoso, ID_ARTICULO = ' || V_ID_ARTICULO);

    ELSE
        -- Obtener cantidad actual
        SELECT CANTIDAD INTO V_CANTIDAD
        FROM ARTICULOS_CARRITO
        WHERE ID_PRODUCTO = P_PRODUCTO AND ID_CARRITO = P_CARRITO;

        DBMS_OUTPUT.PUT_LINE('Ya existe, cantidad actual = ' || V_CANTIDAD);

        -- Actualizar la cantidad
        VSQL := '
            UPDATE ARTICULOS_CARRITO
            SET CANTIDAD = :nuevaCantidad
            WHERE ID_PRODUCTO = :idProducto AND ID_CARRITO = :idCarrito
        ';
        EXECUTE IMMEDIATE VSQL USING V_CANTIDAD + P_CANTIDAD, P_PRODUCTO, P_CARRITO;

        DBMS_OUTPUT.PUT_LINE('Cantidad actualizada a ' || (V_CANTIDAD + P_CANTIDAD));
    END IF;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('--- Fin SP_AGREGAR_ARTICULO_CARRITO ---');

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        VCOD := SQLCODE;
        VMESS := SQLERRM;
        DBMS_OUTPUT.PUT_LINE('ERROR: ' || VCOD || ' - ' || VMESS);
END SP_AGREGAR_ARTICULO_CARRITO;

PROCEDURE SP_ELIMINAR_ARTICULO_CARRITO(
    P_ID IN NUMBER
) AS
    VCOD NUMBER;
    VMESS VARCHAR2(600);
    VSQL VARCHAR2(400);
BEGIN
    
    VSQL := ' DELETE FROM ARTICULOS_CARRITO WHERE ID_ARTICULO = :id';
    EXECUTE IMMEDIATE VSQL USING P_ID;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;  
        VCOD := SQLCODE;
        VMESS:= SQLERRM;
        DBMS_OUTPUT.PUT_LINE(VCOD || ' ' ||  VMESS);
END SP_ELIMINAR_ARTICULO_CARRITO;
PROCEDURE SP_EDITAR_ARTICULO_CARRITO (
    P_ID_ARTICULO IN NUMBER, 
    P_CANTIDAD IN NUMBER
) AS
    VSQL VARCHAR2(400);
    VCOD NUMBER;
    VMESS VARCHAR2(600);
    VPRECIO NUMBER;
BEGIN

    SELECT P.PRECIO INTO VPRECIO
    FROM ARTICULOS_CARRITO C
    INNER JOIN PRODUCTOS P ON C.ID_PRODUCTO = P.ID_PRODUCTO
    WHERE C.ID_ARTICULO = P_ID_ARTICULO;
    
    -- Construir la consulta dinámica para actualizar
    VSQL := 'UPDATE ARTICULOS_CARRITO SET CANTIDAD = :cantidad WHERE ID_ARTICULO = :id';
DBMS_OUTPUT.PUT_LINE(VSQL);
    -- Ejecutar el SQL dinámico
    EXECUTE IMMEDIATE VSQL USING P_CANTIDAD, P_ID_ARTICULO;

    -- Confirmar la transacción
    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        -- Si ocurre un error, hacer rollback y mostrar el error
        ROLLBACK;
        VCOD := SQLCODE;
        VMESS := SQLERRM;
        DBMS_OUTPUT.PUT_LINE('Error: ' || VCOD || ' - ' || VMESS);
END SP_EDITAR_ARTICULO_CARRITO;

END PKG_CARRITO;


COMMIT;


DROP TRIGGER TG_VALIDAR_CANTIDAD_CARRITO






END;

INSERT INTO ARTICULOS_CARRITO VALUES (1, 1, 1, 2);
commit;

EXEC PKG_CARRITO.SP_EDITAR_ARTICULO_CARRITO (44, 3);

COMMIT;





