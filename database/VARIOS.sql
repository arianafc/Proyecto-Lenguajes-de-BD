-----------NUEVO

CREATE OR REPLACE PACKAGE PKG_LEGADO AS
    
  --CONSULTAS
  PROCEDURE SP_AGREGAR_CONSULTA(P_ID IN NUMBER, P_TIPO IN VARCHAR2, P_MENSAJE VARCHAR2);
  PROCEDURE SP_GET_CONSULTA_USUARIO (P_CURSOR OUT SYS_REFCURSOR, P_ID IN NUMBER);
  -- MI PERFIL
  PROCEDURE SP_GET_PEDIDOS_USUARIO(P_DATOS OUT SYS_REFCURSOR, P_ID IN NUMBER);
  FUNCTION FN_CONTAR_PEDIDOS(P_ID IN NUMBER) RETURN NUMBER;
  PROCEDURE SP_GET_PEDIDOS_DETALLES (P_DATOS OUT SYS_REFCURSOR, P_ID IN NUMBER);
  PROCEDURE SP_GET_INFORMACION_USUARIO (P_DATOS OUT SYS_REFCURSOR, P_ID IN NUMBER);
  PROCEDURE SP_ACTUALIZAR_INFORMACION_PERFIL ( P_ID IN NUMBER, P_NOMBRE IN VARCHAR2, P_APELLIDO1 IN VARCHAR2, P_APELLIDO2 IN VARCHAR2, P_EMAIL IN VARCHAR2);
  -- CRUD PRODUCTOS
  FUNCTION FN_CONTAR_PRODUCTOS_REGISTRADOS RETURN NUMBER;

  PROCEDURE SP_AGREGAR_PRODUCTO(
    P_PRECIO IN NUMBER,
    P_CATEGORIA IN NUMBER,
    P_DESCRIPCION IN VARCHAR2,
    P_NOMBRE IN VARCHAR2,
    P_IMAGEN IN VARCHAR2
  );

  PROCEDURE SP_EDITAR_PRODUCTO(
    P_PRECIO     IN NUMBER,
    P_CATEGORIA  IN NUMBER,
    P_DESCRIPCION IN VARCHAR2,
    P_NOMBRE     IN VARCHAR2,
    P_IMAGEN     IN VARCHAR2,
    P_ESTADO     IN NUMBER,
    P_ID         IN NUMBER
  );

  PROCEDURE SP_ELIMINAR_ACTIVAR_PRODUCTO(P_ID IN NUMBER, P_ESTADO IN NUMBER);

  PROCEDURE SP_GET_PRODUCTOS(P_DATOS OUT SYS_REFCURSOR);
  
  PROCEDURE SP_GET_CATEGORIAS(P_DATOS OUT SYS_REFCURSOR);
  
  PROCEDURE SP_GET_PRODUCTO_ID(P_DATOS OUT SYS_REFCURSOR, P_ID IN NUMBER);
  
  PROCEDURE SP_GET_PRODUCTOS_ACTIVOS (P_DATOS OUT SYS_REFCURSOR);

  PROCEDURE SP_OBTENER_PRODUCTO_POR_ID (P_DATOS OUT SYS_REFCURSOR, P_ID IN NUMBER);

END PKG_LEGADO;

CREATE OR REPLACE PACKAGE BODY PKG_LEGADO AS

--CONSULTAS
 PROCEDURE SP_AGREGAR_CONSULTA(P_ID IN NUMBER, P_TIPO IN VARCHAR2, P_MENSAJE VARCHAR2)
 AS
 VSQL VARCHAR2(1000);
 V_ERROR VARCHAR2(2000);
 BEGIN
    VSQL := 'INSERT INTO CONSULTAS (ID_USUARIO, TIPO, MENSAJE, ID_ESTADO) VALUES (:usuario, :tipo, :mensaje, :id)';
    EXECUTE IMMEDIATE VSQL USING P_ID, P_TIPO, P_MENSAJE, 4;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        V_ERROR := SQLERRM;
    INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'CONSULTAS', USER, SYSDATE);
    RAISE_APPLICATION_ERROR(-20002, SQLERRM);
 
 
 END  SP_AGREGAR_CONSULTA;

 PROCEDURE SP_GET_CONSULTA_USUARIO (P_CURSOR OUT SYS_REFCURSOR, P_ID IN NUMBER)
 AS
 V_ERROR VARCHAR2(2000);
 BEGIN 
    OPEN P_CURSOR FOR
        SELECT C.TIPO, C.MENSAJE, E.DESCRIPCION AS ESTADO
        FROM CONSULTAS C
        INNER JOIN ESTADOS E
        ON C.ID_ESTADO = E.ID_ESTADO
        WHERE C.ID_USUARIO = P_ID;
 EXCEPTION
 WHEN OTHERS THEN
        V_ERROR := SQLERRM;
    INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'CONSULTAS', USER, SYSDATE);
    RAISE_APPLICATION_ERROR(-20002, SQLERRM);
 END SP_GET_CONSULTA_USUARIO;


----- MI PERFIL -----
PROCEDURE SP_ACTUALIZAR_INFORMACION_PERFIL (
    P_ID IN NUMBER,
    P_NOMBRE IN VARCHAR2,
    P_APELLIDO1 IN VARCHAR2,
    P_APELLIDO2 IN VARCHAR2,
    P_EMAIL IN VARCHAR2
) AS
    V_ERROR VARCHAR2(2000);
    VSQL VARCHAR2(1000);
BEGIN
     VSQL := '
        UPDATE USUARIOS
        SET NOMBRE = :1,
            APELLIDO1 = :2,
            APELLIDO2 = :3,
            EMAIL = :4
        WHERE ID_USUARIO = :5';
  EXECUTE IMMEDIATE VSQL USING 
        P_NOMBRE, P_APELLIDO1, P_APELLIDO2,  P_EMAIL, P_ID;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        V_ERROR := SQLERRM;
        INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'USUARIOS', USER, SYSDATE);
        RAISE_APPLICATION_ERROR(-20002, SQLERRM);
END SP_ACTUALIZAR_INFORMACION_PERFIL;

PROCEDURE SP_GET_INFORMACION_USUARIO (P_DATOS OUT SYS_REFCURSOR, P_ID IN NUMBER) AS
V_ERROR VARCHAR2(2000);
BEGIN
    OPEN P_DATOS FOR
    SELECT NOMBRE, EMAIL, USERNAME, APELLIDO1, APELLIDO2 FROM USUARIOS WHERE ID_USUARIO = P_ID;
EXCEPTION
    WHEN OTHERS THEN
    V_ERROR := SQLERRM;
    INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'uSUARIOS', USER, SYSDATE);
        RAISE_APPLICATION_ERROR(-20002, SQLERRM);
END SP_GET_INFORMACION_USUARIO;

FUNCTION FN_CONTAR_PEDIDOS(P_ID IN NUMBER) RETURN NUMBER
AS
V_CONTAR NUMBER;
V_ERROR VARCHAR2(2000);
BEGIN
    SELECT COUNT(*) INTO V_CONTAR FROM PEDIDOS WHERE ID_USUARIO = P_ID;
    RETURN V_CONTAR;
EXCEPTION
    WHEN OTHERS THEN
    V_ERROR := SQLERRM;
    INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'PEDIDOS', USER, SYSDATE);
        RAISE_APPLICATION_ERROR(SQLCODE, SQLERRM);
END FN_CONTAR_PEDIDOS;

PROCEDURE SP_GET_PEDIDOS_USUARIO (P_DATOS OUT SYS_REFCURSOR, P_ID IN NUMBER) AS
V_ERROR VARCHAR2(2000);
BEGIN
    OPEN P_DATOS FOR
    SELECT P.ID_PEDIDO, P.FECHA, E.DESCRIPCION AS ESTADO, P.TOTAL, P.METODO_PAGO
    FROM PEDIDOS P 
    INNER JOIN ESTADOS E ON P.ID_ESTADO = E.ID_ESTADO
    WHERE P.ID_USUARIO = P_ID;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
    V_ERROR := SQLERRM;
    INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'PEDIDOS', USER, SYSDATE);
        RAISE_APPLICATION_ERROR(-20002, 'El usuario no tiene pedidos');
        
    WHEN OTHERS THEN 
    V_ERROR := SQLERRM;
     INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'PEDIDOS', USER, SYSDATE);
        RAISE_APPLICATION_ERROR(-20001, SQLERRM);
       
END SP_GET_PEDIDOS_USUARIO;

PROCEDURE SP_GET_PEDIDOS_DETALLES (P_DATOS OUT SYS_REFCURSOR, P_ID IN NUMBER) AS
V_ERROR VARCHAR2(2000);
BEGIN
    OPEN P_DATOS FOR
    SELECT PD.ID_PEDIDO_DETALLE, PD.CANTIDAD, PD.CANTIDAD*P.PRECIO AS SUBTOTAL, P.PRECIO, P.NOMBRE AS PRODUCTO
    FROM PEDIDOS_DETALLES PD
    INNER JOIN PRODUCTOS P
    ON PD.ID_PRODUCTO = P.ID_PRODUCTO
    WHERE PD.ID_PEDIDO = P_ID;
EXCEPTION
    WHEN OTHERS THEN
    V_ERROR := SQLERRM;
    INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'PEDIDOS', USER, SYSDATE);
        RAISE_APPLICATION_ERROR(SQLCODE, SQLERRM);
END SP_GET_PEDIDOS_DETALLES;

----- CRUD PRODUCTOS -----
FUNCTION FN_CONTAR_PRODUCTOS_REGISTRADOS RETURN NUMBER
AS
V_ERROR VARCHAR2(2000);
    V_CONTAR NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_CONTAR FROM PRODUCTOS WHERE ID_ESTADO = 1;
    RETURN V_CONTAR;
EXCEPTION 
    WHEN OTHERS THEN
    V_ERROR := SQLERRM;
        INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'PRODUCTOS', USER, SYSDATE);
        RAISE_APPLICATION_ERROR(-20002, SQLERRM);
END FN_CONTAR_PRODUCTOS_REGISTRADOS;

PROCEDURE SP_AGREGAR_PRODUCTO (
    P_PRECIO IN NUMBER,
    P_CATEGORIA IN NUMBER,
    P_DESCRIPCION IN VARCHAR2,
    P_NOMBRE IN VARCHAR2,
    P_IMAGEN IN VARCHAR2
) 
AS
    VSQL VARCHAR2(400);
    V_ERROR VARCHAR2(2000);
BEGIN
    VSQL := 'INSERT INTO PRODUCTOS (PRECIO, ID_CATEGORIA, ID_ESTADO, DESCRIPCION, NOMBRE, IMAGEN)
             VALUES (:precio, :idCategoria, :estado, :descripcion, :nombre, :imagen)';
             
    EXECUTE IMMEDIATE VSQL USING P_PRECIO, P_CATEGORIA, 1, P_DESCRIPCION, P_NOMBRE, P_IMAGEN;
    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
    V_ERROR := SQLERRM;
    INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'PRODUCTOS_ADD', USER, SYSDATE);
        RAISE_APPLICATION_ERROR(-20001, SQLERRM);
        
END SP_AGREGAR_PRODUCTO;

PROCEDURE SP_EDITAR_PRODUCTO (
    P_PRECIO     IN NUMBER,
    P_CATEGORIA  IN NUMBER,
    P_DESCRIPCION IN VARCHAR2,
    P_NOMBRE     IN VARCHAR2,
    P_IMAGEN     IN VARCHAR2,
    P_ESTADO     IN NUMBER,
    P_ID         IN NUMBER
)
AS
    VSQL VARCHAR2(500);
    V_ERROR VARCHAR2(2000);
BEGIN
    VSQL := 'UPDATE PRODUCTOS 
             SET PRECIO = :precio,
                 ID_CATEGORIA = :categoria,
                 DESCRIPCION = :descripcion,
                 NOMBRE = :nombre,
                 IMAGEN = :imagen,
                 ID_ESTADO = :estado
             WHERE ID_PRODUCTO = :idProducto';

    EXECUTE IMMEDIATE VSQL 
        USING P_PRECIO, P_CATEGORIA, P_DESCRIPCION, P_NOMBRE, P_IMAGEN, P_ESTADO, P_ID;

    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
    V_ERROR := SQLERRM;
    INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA) 
        VALUES (V_ERROR, 'PRODUCTOS_EDIT', USER, SYSDATE);
        RAISE_APPLICATION_ERROR(-20002, SQLERRM);
END SP_EDITAR_PRODUCTO;

PROCEDURE SP_ELIMINAR_ACTIVAR_PRODUCTO (P_ID IN NUMBER, P_ESTADO IN NUMBER)
AS
    VSQL VARCHAR2(200);
    V_ERROR VARCHAR2(2000);
BEGIN
    VSQL := 'UPDATE PRODUCTOS SET ID_ESTADO = :estado WHERE ID_PRODUCTO = :idProducto';
    EXECUTE IMMEDIATE VSQL USING P_ESTADO, P_ID;
    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
    V_ERROR := SQLERRM;
    INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'PRODUCTOS_DELETE', USER, SYSDATE);
        RAISE_APPLICATION_ERROR(-20003, SQLERRM);
        
END SP_ELIMINAR_ACTIVAR_PRODUCTO;

PROCEDURE SP_GET_PRODUCTOS (P_DATOS OUT SYS_REFCURSOR) AS
V_ERROR VARCHAR2(2000);
BEGIN
    OPEN P_DATOS FOR
    SELECT P.ID_PRODUCTO, P.PRECIO, C.DESCRIPCION AS CATEGORIA, P.DESCRIPCION, P.NOMBRE, P.IMAGEN, E.DESCRIPCION AS ESTADO, P.ID_ESTADO
    FROM PRODUCTOS P
    INNER JOIN CATEGORIAS_PRODUCTOS C ON P.ID_CATEGORIA = C.ID_CATEGORIA
    INNER JOIN ESTADOS E ON P.ID_ESTADO = E.ID_ESTADO;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
    V_ERROR := SQLERRM;
    INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'PRODUCTOS_GET', USER, SYSDATE);
        RAISE_APPLICATION_ERROR(-20004, SQLERRM);
        
    WHEN OTHERS THEN
    INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'PRODUCTOS_GET', USER, SYSDATE);
        RAISE_APPLICATION_ERROR(-20003, SQLERRM);
        
END SP_GET_PRODUCTOS;

PROCEDURE SP_GET_CATEGORIAS(P_DATOS OUT SYS_REFCURSOR) AS
V_ERROR VARCHAR2(2000);
BEGIN
    OPEN P_DATOS FOR
    SELECT ID_CATEGORIA, DESCRIPCION, ID_ESTADO
    FROM CATEGORIAS_PRODUCTOS;
EXCEPTION
    WHEN OTHERS THEN
    V_ERROR := SQLERRM;
      INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'CATEGORIAS', USER, SYSDATE);
        RAISE_APPLICATION_ERROR(-20003, SQLERRM);
END SP_GET_CATEGORIAS;

PROCEDURE SP_GET_PRODUCTO_ID (P_DATOS OUT SYS_REFCURSOR, P_ID IN NUMBER)
IS
BEGIN
    OPEN P_DATOS FOR
    SELECT ID_PRODUCTO, PRECIO, ID_CATEGORIA, ID_ESTADO, DESCRIPCION, NOMBRE, IMAGEN
    FROM PRODUCTOS WHERE ID_PRODUCTO = P_ID;
END;

PROCEDURE SP_GET_PRODUCTOS_ACTIVOS (P_DATOS OUT SYS_REFCURSOR)
AS
V_PRODUCTOS NUMBER;
BEGIN
    V_PRODUCTOS := FN_CONTAR_PRODUCTOS_REGISTRADOS;

    IF V_PRODUCTOS > 0 THEN
    OPEN P_DATOS FOR
    SELECT ID_PRODUCTO, PRECIO, ID_CATEGORIA, ID_ESTADO, DESCRIPCION, NOMBRE, IMAGEN
    FROM PRODUCTOS WHERE ID_ESTADO = 1;

    ELSE
    OPEN P_DATOS FOR
    SELECT 'No hay productos registrados' AS MENSAJE, NULL AS ID_PRODUCTO,  NULL AS CANTIDAD, NULL AS PRECIO, NULL AS ID_CATEGORIA, NULL AS ID_ESTADO, NULL AS DESCRIPCION, NULL AS NOMBRE
    FROM DUAL;
    END IF;
END SP_GET_PRODUCTOS_ACTIVOS;

PROCEDURE SP_OBTENER_PRODUCTO_POR_ID (P_DATOS OUT SYS_REFCURSOR, P_ID IN NUMBER) AS
BEGIN
    OPEN P_DATOS FOR
    SELECT ID_PRODUCTO, PRECIO, ID_CATEGORIA, ID_ESTADO, DESCRIPCION, NOMBRE, IMAGEN
    FROM PRODUCTOS WHERE ID_PRODUCTO = P_ID;
END;


END PKG_LEGADO;


DROP PROCEDURE SP_OBTENER_PRODUCTO_POR_ID

CREATE OR REPLACE VIEW V_SELECCION_PRODUCTOS AS SELECT 



--ALTERACIONES
ALTER TABLE PRODUCTOS ADD IMAGEN VARCHAR2(400)
ALTER TABLE PRODUCTOS DROP COLUMN CANTIDAD
ALTER TABLE PRODUCTOS MODIFY ID_PRODUCTO DEFAULT SEQ_PRODUCTOS.NEXTVAL




--CREACION DE TABLA AUDITORIA ERRORES

CREATE SEQUENCE SEQ_AUDITORIA_ERRORES INCREMENT BY 1 START WITH 1
MAXVALUE 99999 MINVALUE 0;

CREATE TABLE AUDITORIA_ERRORES_LEGADO (
ID NUMBER DEFAULT SEQ_AUDITORIA_ERRORES.NEXTVAL PRIMARY KEY,
VERROR VARCHAR2(2000),
ORIGEN VARCHAR2(400),
VUSER VARCHAR2(100),
FECHA DATE
) TABLESPACE BD_LEGADO;


CREATE SEQUENCE SEQ_CONSULTAS INCREMENT BY 1 START WITH 1 MAXVALUE 99999 MINVALUE 0;
ALTER TABLE CONSULTAS MODIFY ID_CONSULTA DEFAULT SEQ_CONSULTAS.NEXTVAL