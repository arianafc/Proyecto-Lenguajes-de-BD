-----------NUEVO

CREATE OR REPLACE PACKAGE PKG_LEGADO AS

 --CRUD USUARIOS Y LOGIN
 FUNCTION FN_RECUPERAR_USUARIO (P_EMAIL IN VARCHAR2, P_NOMBRE IN VARCHAR2) RETURN VARCHAR2;
 PROCEDURE SP_CAMBIAR_CONTRASENA (
    P_USERNAME IN VARCHAR2,
    P_NUEVA_CONTRASENA IN VARCHAR2
);

 PROCEDURE SP_LISTAR_USUARIOS (
    P_CURSOR OUT SYS_REFCURSOR
);

PROCEDURE SP_AGREGAR_USUARIO(
    P_NOMBRE IN VARCHAR2,
    P_EMAIL IN VARCHAR2,
    P_ESTADO IN NUMBER,
    P_APELLIDO1 IN VARCHAR2,
    P_APELLIDO2 IN VARCHAR2,
    P_USERNAME IN VARCHAR2,
    P_CONTRASENA IN VARCHAR2,
    P_ROL IN NUMBER,
    P_ID_USUARIO OUT NUMBER
);

PROCEDURE SP_EDITAR_USUARIO(
    P_ID_USUARIO   IN NUMBER,
    P_NOMBRE       IN VARCHAR2,
    P_APELLIDO1    IN VARCHAR2,
    P_APELLIDO2    IN VARCHAR2,
    P_EMAIL        IN VARCHAR2,
    P_ESTADO       IN NUMBER,
    P_USERNAME     IN VARCHAR2,
    P_CONTRASENA   IN VARCHAR2,
    P_ROL          IN NUMBER
);

PROCEDURE SP_CAMBIAR_ESTADO_USUARIO (
    P_ID_USUARIO IN NUMBER,
    P_NUEVO_ESTADO IN NUMBER
);

PROCEDURE SP_VERIFICAR_USUARIO(
    p_username IN VARCHAR2,
    p_id_usuario OUT NUMBER,
    p_id_rol OUT NUMBER,
    p_rol_descripcion OUT VARCHAR2,
    p_email OUT VARCHAR2,
    p_contrasena OUT VARCHAR2,
    p_nombre OUT VARCHAR2,
    p_id_carrito OUT NUMBER,
    p_estado_usuario   OUT NUMBER
);

PROCEDURE SP_OBTENER_ROLES (
    P_CURSOR OUT SYS_REFCURSOR
);

PROCEDURE SP_CREAR_CARRITO(
    P_ID_USUARIO IN NUMBER
);

  --CONSULTAS
  PROCEDURE SP_AGREGAR_CONSULTA(P_ID IN NUMBER, P_TIPO IN VARCHAR2, P_MENSAJE VARCHAR2);
  PROCEDURE SP_GET_CONSULTA_USUARIO (P_CURSOR OUT SYS_REFCURSOR, P_ID IN NUMBER);
  PROCEDURE SP_GET_CONSULTAS (P_CURSOR OUT SYS_REFCURSOR);
  PROCEDURE SP_CRUD_CONSULTAS (P_ACCION IN NUMBER, P_ID IN NUMBER);
  
  
  -- MI PERFIL
  PROCEDURE SP_GET_PEDIDOS_USUARIO(P_DATOS OUT SYS_REFCURSOR, P_ID IN NUMBER);
  FUNCTION FN_CONTAR_PEDIDOS(P_ID IN NUMBER) RETURN NUMBER;
  PROCEDURE SP_GET_PEDIDOS_DETALLES (P_DATOS OUT SYS_REFCURSOR, P_ID IN NUMBER);
  PROCEDURE SP_GET_INFORMACION_USUARIO (P_DATOS OUT SYS_REFCURSOR, P_ID IN NUMBER);
  PROCEDURE SP_ACTUALIZAR_INFORMACION_PERFIL ( P_ID IN NUMBER, P_NOMBRE IN VARCHAR2, P_APELLIDO1 IN VARCHAR2, P_APELLIDO2 IN VARCHAR2, P_EMAIL IN VARCHAR2);
  
  
  -- CRUD PRODUCTOS
  FUNCTION FN_CONTAR_PRODUCTOS_REGISTRADOS RETURN NUMBER;
  PROCEDURE SP_AGREGAR_PRODUCTO( P_PRECIO IN NUMBER, P_CATEGORIA IN NUMBER, P_DESCRIPCION IN VARCHAR2, P_NOMBRE IN VARCHAR2, P_IMAGEN IN VARCHAR2);
  PROCEDURE SP_EDITAR_PRODUCTO( P_PRECIO     IN NUMBER, P_CATEGORIA  IN NUMBER, P_DESCRIPCION IN VARCHAR2, P_NOMBRE     IN VARCHAR2, P_IMAGEN     IN VARCHAR2, P_ESTADO     IN NUMBER,  P_ID IN NUMBER);
  PROCEDURE SP_ELIMINAR_ACTIVAR_PRODUCTO(P_ID IN NUMBER, P_ESTADO IN NUMBER);
  PROCEDURE SP_GET_PRODUCTOS(P_DATOS OUT SYS_REFCURSOR);
  PROCEDURE SP_GET_CATEGORIAS(P_DATOS OUT SYS_REFCURSOR);
  PROCEDURE SP_GET_PRODUCTO_ID(P_DATOS OUT SYS_REFCURSOR, P_ID IN NUMBER);
  PROCEDURE SP_GET_PRODUCTOS_ACTIVOS (P_DATOS OUT SYS_REFCURSOR);
  PROCEDURE SP_OBTENER_PRODUCTO_POR_ID (P_DATOS OUT SYS_REFCURSOR, P_ID IN NUMBER);
  PROCEDURE SP_CRUD_CATEGORIAS (DESCRIPCION IN VARCHAR2, P_ID IN NUMBER, P_ACCION IN NUMBER);
  PROCEDURE SP_GET_PRODUCTOS_CATEGORIAS (P_DATOS OUT SYS_REFCURSOR, P_CATEGORIA IN NUMBER);
  
END PKG_LEGADO;

CREATE OR REPLACE PACKAGE BODY PKG_LEGADO AS

--CRUD USUARIOS Y LOGIN

PROCEDURE SP_CAMBIAR_CONTRASENA (
    P_USERNAME IN VARCHAR2,
    P_NUEVA_CONTRASENA IN VARCHAR2
) AS
    V_CONTAR NUMBER;
    V_ERROR VARCHAR2(4000);
BEGIN
    -- Validar formato de la contraseña
    IF NOT REGEXP_LIKE(P_NUEVA_CONTRASENA, '^[A-Za-z0-9]{10,}$') THEN
        RAISE_APPLICATION_ERROR(-20003, 'La contraseña debe tener al menos 10 caracteres alfanuméricos.');
    END IF;

    -- Verifica si el usuario existe
    SELECT COUNT(*) INTO V_CONTAR FROM USUARIOS WHERE USERNAME = P_USERNAME;

    IF V_CONTAR = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'El usuario no existe.');
    END IF;

    -- Actualiza la contraseña
    UPDATE USUARIOS
    SET CONTRASENA = P_NUEVA_CONTRASENA
    WHERE USERNAME = P_USERNAME;

    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        V_ERROR := SQLERRM;
        INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'SP_CAMBIAR_CONTRASENA', USER, SYSDATE);
        RAISE_APPLICATION_ERROR(-20002, 'Error en SP_CAMBIAR_CONTRASENA: ' || V_ERROR);
END;

FUNCTION FN_RECUPERAR_USUARIO (P_EMAIL IN VARCHAR2, P_NOMBRE IN VARCHAR2) RETURN VARCHAR2 AS
V_CONTAR NUMBER;
V_USERNAME VARCHAR2 (100);
V_COINCIDE NUMBER;
V_ERROR VARCHAR2(4000);
BEGIN
    SELECT COUNT(EMAIL) INTO V_CONTAR FROM USUARIOS WHERE LOWER(EMAIL) = LOWER(P_EMAIL); 
    IF V_CONTAR = 0 THEN
        V_USERNAME := 'Lo sentimos, no hay ningún usuario asociado al correo indicado';
        RETURN V_USERNAME;
    ELSE 
        SELECT COUNT(*) INTO V_COINCIDE FROM USUARIOS WHERE LOWER(EMAIL) = LOWER(P_EMAIL) AND LOWER(NOMBRE) = LOWER(P_NOMBRE);
        IF V_COINCIDE > 0 THEN
            SELECT USERNAME INTO V_USERNAME FROM USUARIOS WHERE LOWER(EMAIL) = LOWER(P_EMAIL) AND LOWER(NOMBRE) = LOWER(P_NOMBRE);
            RETURN V_USERNAME;
        ELSE 
            V_USERNAME := 'Lo sentimos, no hay ningún usuario asociado al correo y nombre indicado';
            RETURN V_USERNAME;
        END IF;
    END IF;
    EXCEPTION
WHEN OTHERS THEN
        V_ERROR := SQLERRM;
        INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'FN_RECUPERAR_USUARIO', USER, SYSDATE);
        RAISE_APPLICATION_ERROR(-20001, 'Error en FN_RECUPERAR_USUARIO: ' || V_ERROR);
END FN_RECUPERAR_USUARIO;


PROCEDURE SP_LISTAR_USUARIOS (
    P_CURSOR OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN P_CURSOR FOR
    SELECT 
        U.ID_USUARIO, 
        U.NOMBRE, 
        U.APELLIDO1, 
        U.APELLIDO2,
        U.USERNAME, 
        U.EMAIL, 
        U.ID_ROL,              
        R.DESCRIPCION AS ROL, 
        U.ID_ESTADO,          
        E.DESCRIPCION AS ESTADO
    FROM USUARIOS U
    LEFT JOIN ROLS R ON U.ID_ROL = R.ID_ROL
    LEFT JOIN ESTADOS E ON U.ID_ESTADO = E.ID_ESTADO
    ORDER BY U.ID_USUARIO;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20001, 'ERROR AL LISTAR USUARIOS: ' || SQLERRM);
END SP_LISTAR_USUARIOS;

PROCEDURE SP_AGREGAR_USUARIO(
    P_NOMBRE IN VARCHAR2,
    P_EMAIL IN VARCHAR2,
    P_ESTADO IN NUMBER,
    P_APELLIDO1 IN VARCHAR2,
    P_APELLIDO2 IN VARCHAR2,
    P_USERNAME IN VARCHAR2,
    P_CONTRASENA IN VARCHAR2,
    P_ROL IN NUMBER,
    P_ID_USUARIO OUT NUMBER
) AS
    V_COUNT_EMAIL NUMBER := 0;
    V_COUNT_USERNAME NUMBER := 0;
BEGIN
    -- Validar si el email ya existe
    SELECT COUNT(*) INTO V_COUNT_EMAIL 
    FROM USUARIOS 
    WHERE UPPER(EMAIL) = UPPER(P_EMAIL);

    IF NOT REGEXP_LIKE(P_CONTRASENA, '^[A-Za-z0-9]{10,}$') THEN
        RAISE_APPLICATION_ERROR(-20003, 'La contraseña debe tener al menos 10 caracteres e incluir letras y números.');
    END IF;
    
    IF V_COUNT_EMAIL > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'El correo electrónico ya está registrado con otro usuario.');
    END IF;
    
    -- Validar si el username ya existe
    SELECT COUNT(*) INTO V_COUNT_USERNAME
    FROM USUARIOS 
    WHERE UPPER(USERNAME) = UPPER(P_USERNAME);
    
    IF V_COUNT_USERNAME > 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'El nombre de usuario ya está en uso. Por favor elija otro.');
    END IF;
    
    -- Obtener el siguiente ID para el usuario
    SELECT SEQ_USUARIOS.NEXTVAL INTO P_ID_USUARIO FROM DUAL;
    
    -- Insertar el nuevo usuario
    INSERT INTO USUARIOS (ID_USUARIO, NOMBRE, APELLIDO1, APELLIDO2, EMAIL, ID_ESTADO, USERNAME, CONTRASENA, ID_ROL)
    VALUES (P_ID_USUARIO, P_NOMBRE, P_APELLIDO1, P_APELLIDO2, P_EMAIL, P_ESTADO, P_USERNAME, P_CONTRASENA, P_ROL);
    
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        IF SQLCODE = -20001 OR SQLCODE = -20002 OR SQLCODE = -20003 THEN
            RAISE;
        ELSE
            RAISE_APPLICATION_ERROR(-20004, 'ERROR AL AGREGAR USUARIO: ' || SQLERRM);
        END IF;
END SP_AGREGAR_USUARIO;

PROCEDURE SP_EDITAR_USUARIO(
    P_ID_USUARIO   IN NUMBER,
    P_NOMBRE       IN VARCHAR2,
    P_APELLIDO1    IN VARCHAR2,
    P_APELLIDO2    IN VARCHAR2,
    P_EMAIL        IN VARCHAR2,
    P_ESTADO       IN NUMBER,
    P_USERNAME     IN VARCHAR2,
    P_CONTRASENA   IN VARCHAR2,
    P_ROL          IN NUMBER
)
AS
BEGIN
    IF P_CONTRASENA IS NOT NULL AND LENGTH(TRIM(P_CONTRASENA)) > 0 THEN
        UPDATE USUARIOS
        SET NOMBRE = P_NOMBRE,
            APELLIDO1 = P_APELLIDO1,
            APELLIDO2 = P_APELLIDO2,
            EMAIL = P_EMAIL,
            ID_ESTADO = P_ESTADO,
            USERNAME = P_USERNAME,
            CONTRASENA = P_CONTRASENA,
            ID_ROL = P_ROL
        WHERE ID_USUARIO = P_ID_USUARIO;
    ELSE
        UPDATE USUARIOS
        SET NOMBRE = P_NOMBRE,
            APELLIDO1 = P_APELLIDO1,
            APELLIDO2 = P_APELLIDO2,
            EMAIL = P_EMAIL,
            ID_ESTADO = P_ESTADO,
            USERNAME = P_USERNAME,
            ID_ROL = P_ROL
        WHERE ID_USUARIO = P_ID_USUARIO;
    END IF;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE_APPLICATION_ERROR(-20005, 'ERROR AL EDITAR USUARIO: ' || SQLERRM);
END SP_EDITAR_USUARIO;

PROCEDURE SP_CAMBIAR_ESTADO_USUARIO (
    P_ID_USUARIO IN NUMBER,
    P_NUEVO_ESTADO IN NUMBER
)
AS
BEGIN
    UPDATE USUARIOS
    SET ID_ESTADO = P_NUEVO_ESTADO
    WHERE ID_USUARIO = P_ID_USUARIO;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE_APPLICATION_ERROR(-20006, 'ERROR AL CAMBIAR ESTADO DEL USUARIO: ' || SQLERRM);
END SP_CAMBIAR_ESTADO_USUARIO;

PROCEDURE SP_VERIFICAR_USUARIO(
    p_username IN VARCHAR2,
    p_id_usuario OUT NUMBER,
    p_id_rol OUT NUMBER,
    p_rol_descripcion OUT VARCHAR2,
    p_email OUT VARCHAR2,
    p_contrasena OUT VARCHAR2,
    p_nombre OUT VARCHAR2,
    p_id_carrito OUT NUMBER,
    p_estado_usuario   OUT NUMBER
)
AS
BEGIN
    SELECT ID_USUARIO, ID_ROL, ROL_DESCRIPCION, EMAIL, CONTRASENA, NOMBRE, ID_CARRITO, ID_ESTADO
    INTO p_id_usuario, p_id_rol, p_rol_descripcion, p_email, p_contrasena, p_nombre, p_id_carrito, p_estado_usuario
    FROM V_USUARIOS_ROLES 
    WHERE USERNAME = p_username;
    
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        p_id_usuario := NULL;
        p_id_rol := NULL;
        p_rol_descripcion := NULL;
        p_email := NULL;
        p_contrasena := NULL;
        p_nombre := NULL;
        p_id_carrito := NULL;
        p_estado_usuario := NULL;
    WHEN OTHERS THEN
        RAISE;
END SP_VERIFICAR_USUARIO;

PROCEDURE SP_OBTENER_ROLES (
    P_CURSOR OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN P_CURSOR FOR
    SELECT ID_ROL, DESCRIPCION FROM ROLS ORDER BY ID_ROL;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20002, 'ERROR AL OBTENER ROLES: ' || SQLERRM);
END SP_OBTENER_ROLES;

PROCEDURE SP_CREAR_CARRITO(
    P_ID_USUARIO IN NUMBER
) AS
    V_ID_CARRITO NUMBER;
BEGIN
    SELECT SEQ_CARRITO.NEXTVAL INTO V_ID_CARRITO FROM DUAL;

    INSERT INTO CARRITO (ID_CARRITO, ID_USUARIO, FECHA_CREACION)
    VALUES (V_ID_CARRITO, P_ID_USUARIO, SYSDATE);

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE_APPLICATION_ERROR(-20005, 'ERROR AL CREAR CARRITO: ' || SQLERRM);
END SP_CREAR_CARRITO;

--CONSULTAS

 PROCEDURE SP_AGREGAR_CONSULTA(P_ID IN NUMBER, P_TIPO IN VARCHAR2, P_MENSAJE VARCHAR2)
 AS
 VSQL VARCHAR2(1000);
 V_ERROR VARCHAR2(2000);
 BEGIN
    VSQL := 'INSERT INTO CONSULTAS (ID_USUARIO, TIPO, MENSAJE, ID_ESTADO, FECHA) VALUES (:usuario, :tipo, :mensaje, :id, :fecha)';
    EXECUTE IMMEDIATE VSQL USING P_ID, P_TIPO, P_MENSAJE, 4, TO_DATE(SYSDATE, 'YYYY-MM-DD');
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        V_ERROR := SQLERRM;
    INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'CONSULTAS', USER, SYSDATE);
    RAISE_APPLICATION_ERROR(-20002, SQLERRM);
 
 
 END  SP_AGREGAR_CONSULTA;

 PROCEDURE SP_GET_CONSULTA_USUARIO (P_CURSOR OUT SYS_REFCURSOR, P_ID IN NUMBER)
 AS
 V_ERROR VARCHAR2(2000);
 BEGIN 
    OPEN P_CURSOR FOR
        SELECT C.TIPO, C.MENSAJE, E.DESCRIPCION AS ESTADO
        FROM CONSULTAS C
        INNER JOIN ESTADOS E
        ON C.ID_ESTADO = E.ID_ESTADO
        WHERE C.ID_USUARIO = P_ID;
 EXCEPTION
 WHEN OTHERS THEN
        V_ERROR := SQLERRM;
    INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'CONSULTAS', USER, SYSDATE);
    RAISE_APPLICATION_ERROR(-20002, SQLERRM);
 END SP_GET_CONSULTA_USUARIO;

PROCEDURE SP_GET_CONSULTAS (
    P_CURSOR OUT SYS_REFCURSOR
)
AS
    V_ERROR VARCHAR2(4000);
BEGIN
    OPEN P_CURSOR FOR
    SELECT 
        C.FECHA,
        C.ID_CONSULTA,
        C.TIPO,
        C.MENSAJE,
        C.ID_ESTADO,
        E.DESCRIPCION AS ESTADO,
        U.NOMBRE || ' ' || U.APELLIDO1 || ' ' || U.APELLIDO2 AS USUARIO,
        U.EMAIL,
        (
            SELECT TELEFONO 
            FROM TELEFONOS 
            WHERE ID_USUARIO = U.ID_USUARIO AND ID_ESTADO = 1
            AND ROWNUM = 1
        ) AS TELEFONO_ACTIVO
    FROM CONSULTAS C
    INNER JOIN ESTADOS E ON E.ID_ESTADO = C.ID_ESTADO
    INNER JOIN USUARIOS U ON C.ID_USUARIO = U.ID_USUARIO;

EXCEPTION
    WHEN OTHERS THEN
        V_ERROR := SQLERRM;
        INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'SP_GET_CONSULTAS', USER, SYSDATE);
        RAISE_APPLICATION_ERROR(-20001, 'Error en SP_GET_CONSULTAS: ' || V_ERROR);
END SP_GET_CONSULTAS;

PROCEDURE SP_CRUD_CONSULTAS (
    P_ACCION IN NUMBER,
    P_ID     IN NUMBER
)
AS
    VSQL    VARCHAR2(1000);
    V_ERROR VARCHAR2(4000);
BEGIN
    -- Si la acción es 1, se marca como contestada (ID_ESTADO = 6)
    IF P_ACCION = 1 THEN
        VSQL := 'UPDATE CONSULTAS SET ID_ESTADO = :1 WHERE ID_CONSULTA = :2';
        EXECUTE IMMEDIATE VSQL USING 6, P_ID;
        COMMIT;
    ELSE
        -- Cualquier otra acción marcará como pendiente (ID_ESTADO = 3)
        VSQL := 'UPDATE CONSULTAS SET ID_ESTADO = :1 WHERE ID_CONSULTA = :2';
        EXECUTE IMMEDIATE VSQL USING 3, P_ID;
        COMMIT;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        V_ERROR := SQLERRM;
        INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'SP_CRUD_CONSULTAS', USER, SYSDATE);
        RAISE_APPLICATION_ERROR(-20001, 'Error en SP_CRUD_CONSULTAS: ' || V_ERROR);
END SP_CRUD_CONSULTAS;


----- MI PERFIL -----
PROCEDURE SP_GET_DIRECCIONES_USUARIO (P_DATOS OUT SYS_REFCURSOR, P_ID IN NUMBER) AS
V_ERROR VARCHAR2(2000);
BEGIN
    OPEN P_DATOS FOR
    SELECT D.DIRECCION_EXACTA, D.ID_DIRECCION, DIR.NOMBRE AS DISTRITO, C.NOMBRE AS CANTON, P.NOMBRE AS PROVINCIA
    FROM DIRECCIONES D 
    INNER JOIN DISTRITOS DIR 
    ON D.ID_DISTRITO = DIR.ID_DISTRITO
    INNER JOIN CANTONES C
    ON C.ID_CANTON = DIR.ID_CANTON
    INNER JOIN PROVINCIAS P
    ON P.ID_PROVINCIA = C.ID_PROVINCIA;
EXCEPTION
WHEN OTHERS THEN
        V_ERROR := SQLERRM;
        INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'USUARIOS', USER, SYSDATE);
        RAISE_APPLICATION_ERROR(-20002, 'Error al obtener direcciones');
END SP_GET_DIRECCIONES_USUARIO;

PROCEDURE SP_ACTUALIZAR_INFORMACION_PERFIL (
    P_ID IN NUMBER,
    P_NOMBRE IN VARCHAR2,
    P_APELLIDO1 IN VARCHAR2,
    P_APELLIDO2 IN VARCHAR2,
    P_EMAIL IN VARCHAR2
) AS
    V_ERROR VARCHAR2(2000);
    VSQL VARCHAR2(1000);
    CURSOR C_EMAIL_EXISTE IS
        SELECT 1 FROM USUARIOS 
        WHERE EMAIL = P_EMAIL AND ID_USUARIO != P_ID;
    V_EXISTE_EMAIL C_EMAIL_EXISTE%ROWTYPE;
BEGIN
    -- Validación de correo duplicado
    OPEN C_EMAIL_EXISTE;
    FETCH C_EMAIL_EXISTE INTO V_EXISTE_EMAIL;
    IF C_EMAIL_EXISTE%FOUND THEN
        CLOSE C_EMAIL_EXISTE;
        RAISE_APPLICATION_ERROR(-20003, 'El correo electrónico ya está registrado por otro usuario');
    END IF;
    CLOSE C_EMAIL_EXISTE;

    -- Actualización
    VSQL := '
        UPDATE USUARIOS
        SET NOMBRE = :1,
            APELLIDO1 = :2,
            APELLIDO2 = :3,
            EMAIL = :4
        WHERE ID_USUARIO = :5';

    EXECUTE IMMEDIATE VSQL USING 
        P_NOMBRE, P_APELLIDO1, P_APELLIDO2, P_EMAIL, P_ID;

    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        V_ERROR := SQLERRM;
        INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'USUARIOS', USER, SYSDATE);
        RAISE;
END SP_ACTUALIZAR_INFORMACION_PERFIL;

PROCEDURE SP_GET_INFORMACION_USUARIO (P_DATOS OUT SYS_REFCURSOR, P_ID IN NUMBER) AS
V_ERROR VARCHAR2(2000);
BEGIN
    OPEN P_DATOS FOR
    SELECT NOMBRE, EMAIL, USERNAME, APELLIDO1, APELLIDO2 FROM USUARIOS WHERE ID_USUARIO = P_ID;
EXCEPTION
    WHEN OTHERS THEN
    V_ERROR := SQLERRM;
    INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'uSUARIOS', USER, SYSDATE);
        RAISE_APPLICATION_ERROR(-20002, SQLERRM);
END SP_GET_INFORMACION_USUARIO;

FUNCTION FN_CONTAR_PEDIDOS(P_ID IN NUMBER) RETURN NUMBER
AS
V_CONTAR NUMBER;
V_ERROR VARCHAR2(2000);
BEGIN
    SELECT COUNT(*) INTO V_CONTAR FROM PEDIDOS WHERE ID_USUARIO = P_ID;
    RETURN V_CONTAR;
EXCEPTION
    WHEN OTHERS THEN
    V_ERROR := SQLERRM;
    INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'PEDIDOS', USER, SYSDATE);
        RAISE_APPLICATION_ERROR(SQLCODE, SQLERRM);
END FN_CONTAR_PEDIDOS;

PROCEDURE SP_GET_PEDIDOS_USUARIO (P_DATOS OUT SYS_REFCURSOR, P_ID IN NUMBER) AS
V_ERROR VARCHAR2(2000);
BEGIN
    OPEN P_DATOS FOR
    SELECT P.ID_PEDIDO, P.FECHA, E.DESCRIPCION AS ESTADO, P.TOTAL, P.METODO_PAGO
    FROM PEDIDOS P 
    INNER JOIN ESTADOS E ON P.ID_ESTADO = E.ID_ESTADO
    WHERE P.ID_USUARIO = P_ID;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
    V_ERROR := SQLERRM;
    INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'PEDIDOS', USER, SYSDATE);
        RAISE_APPLICATION_ERROR(-20002, 'El usuario no tiene pedidos');
        
    WHEN OTHERS THEN 
    V_ERROR := SQLERRM;
     INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'PEDIDOS', USER, SYSDATE);
        RAISE_APPLICATION_ERROR(-20001, SQLERRM);
       
END SP_GET_PEDIDOS_USUARIO;

PROCEDURE SP_GET_PEDIDOS_DETALLES (P_DATOS OUT SYS_REFCURSOR, P_ID IN NUMBER) AS
V_ERROR VARCHAR2(2000);
BEGIN
    OPEN P_DATOS FOR
    SELECT PD.ID_PEDIDO_DETALLE, PD.CANTIDAD, PD.CANTIDAD*P.PRECIO AS SUBTOTAL, P.PRECIO, P.NOMBRE AS PRODUCTO
    FROM PEDIDOS_DETALLES PD
    INNER JOIN PRODUCTOS P
    ON PD.ID_PRODUCTO = P.ID_PRODUCTO
    WHERE PD.ID_PEDIDO = P_ID;
EXCEPTION
    WHEN OTHERS THEN
    V_ERROR := SQLERRM;
    INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'PEDIDOS', USER, SYSDATE);
        RAISE_APPLICATION_ERROR(SQLCODE, SQLERRM);
END SP_GET_PEDIDOS_DETALLES;

----- CRUD PRODUCTOS -----
FUNCTION FN_CONTAR_PRODUCTOS_REGISTRADOS RETURN NUMBER
AS
V_ERROR VARCHAR2(2000);
    V_CONTAR NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_CONTAR FROM PRODUCTOS WHERE ID_ESTADO = 1;
    RETURN V_CONTAR;
EXCEPTION 
    WHEN OTHERS THEN
    V_ERROR := SQLERRM;
        INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'PRODUCTOS', USER, SYSDATE);
        RAISE_APPLICATION_ERROR(-20002, SQLERRM);
END FN_CONTAR_PRODUCTOS_REGISTRADOS;

PROCEDURE SP_AGREGAR_PRODUCTO (
    P_PRECIO IN NUMBER,
    P_CATEGORIA IN NUMBER,
    P_DESCRIPCION IN VARCHAR2,
    P_NOMBRE IN VARCHAR2,
    P_IMAGEN IN VARCHAR2
) 
AS
    VSQL VARCHAR2(400);
    V_ERROR VARCHAR2(2000);
BEGIN
    VSQL := 'INSERT INTO PRODUCTOS (PRECIO, ID_CATEGORIA, ID_ESTADO, DESCRIPCION, NOMBRE, IMAGEN)
             VALUES (:precio, :idCategoria, :estado, :descripcion, :nombre, :imagen)';
             
    EXECUTE IMMEDIATE VSQL USING P_PRECIO, P_CATEGORIA, 1, P_DESCRIPCION, P_NOMBRE, P_IMAGEN;
    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
    V_ERROR := SQLERRM;
    INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'PRODUCTOS_ADD', USER, SYSDATE);
        RAISE_APPLICATION_ERROR(-20001, SQLERRM);
        
END SP_AGREGAR_PRODUCTO;

PROCEDURE SP_EDITAR_PRODUCTO (
    P_PRECIO     IN NUMBER,
    P_CATEGORIA  IN NUMBER,
    P_DESCRIPCION IN VARCHAR2,
    P_NOMBRE     IN VARCHAR2,
    P_IMAGEN     IN VARCHAR2,
    P_ESTADO     IN NUMBER,
    P_ID         IN NUMBER
)
AS
    VSQL VARCHAR2(500);
    V_ERROR VARCHAR2(2000);
BEGIN
    VSQL := 'UPDATE PRODUCTOS 
             SET PRECIO = :precio,
                 ID_CATEGORIA = :categoria,
                 DESCRIPCION = :descripcion,
                 NOMBRE = :nombre,
                 IMAGEN = :imagen,
                 ID_ESTADO = :estado
             WHERE ID_PRODUCTO = :idProducto';

    EXECUTE IMMEDIATE VSQL 
        USING P_PRECIO, P_CATEGORIA, P_DESCRIPCION, P_NOMBRE, P_IMAGEN, P_ESTADO, P_ID;

    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
    V_ERROR := SQLERRM;
    INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA) 
        VALUES (V_ERROR, 'PRODUCTOS_EDIT', USER, SYSDATE);
        RAISE_APPLICATION_ERROR(-20002, SQLERRM);
END SP_EDITAR_PRODUCTO;

PROCEDURE SP_ELIMINAR_ACTIVAR_PRODUCTO (P_ID IN NUMBER, P_ESTADO IN NUMBER)
AS
    VSQL VARCHAR2(200);
    V_ERROR VARCHAR2(2000);
BEGIN
    VSQL := 'UPDATE PRODUCTOS SET ID_ESTADO = :estado WHERE ID_PRODUCTO = :idProducto';
    EXECUTE IMMEDIATE VSQL USING P_ESTADO, P_ID;
    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
    V_ERROR := SQLERRM;
    INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'PRODUCTOS_DELETE', USER, SYSDATE);
        RAISE_APPLICATION_ERROR(-20003, SQLERRM);
        
END SP_ELIMINAR_ACTIVAR_PRODUCTO;

PROCEDURE SP_GET_PRODUCTOS (P_DATOS OUT SYS_REFCURSOR) AS
V_ERROR VARCHAR2(2000);
BEGIN
    OPEN P_DATOS FOR
    SELECT P.ID_PRODUCTO, P.PRECIO, C.DESCRIPCION AS CATEGORIA, P.DESCRIPCION, P.NOMBRE, P.IMAGEN, E.DESCRIPCION AS ESTADO, P.ID_ESTADO
    FROM PRODUCTOS P
    INNER JOIN CATEGORIAS_PRODUCTOS C ON P.ID_CATEGORIA = C.ID_CATEGORIA
    INNER JOIN ESTADOS E ON P.ID_ESTADO = E.ID_ESTADO;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
    V_ERROR := SQLERRM;
    INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'PRODUCTOS_GET', USER, SYSDATE);
        RAISE_APPLICATION_ERROR(-20004, SQLERRM);
        
    WHEN OTHERS THEN
    INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'PRODUCTOS_GET', USER, SYSDATE);
        RAISE_APPLICATION_ERROR(-20003, SQLERRM);
        
END SP_GET_PRODUCTOS;

PROCEDURE SP_GET_CATEGORIAS(P_DATOS OUT SYS_REFCURSOR) AS
V_ERROR VARCHAR2(2000);
BEGIN
    OPEN P_DATOS FOR
    SELECT ID_CATEGORIA, DESCRIPCION, ID_ESTADO
    FROM CATEGORIAS_PRODUCTOS;
EXCEPTION
    WHEN OTHERS THEN
    V_ERROR := SQLERRM;
      INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'CATEGORIAS', USER, SYSDATE);
        RAISE_APPLICATION_ERROR(-20003, SQLERRM);
END SP_GET_CATEGORIAS;

PROCEDURE SP_GET_PRODUCTO_ID (P_DATOS OUT SYS_REFCURSOR, P_ID IN NUMBER)
IS
BEGIN
    OPEN P_DATOS FOR
    SELECT ID_PRODUCTO, PRECIO, ID_CATEGORIA, ID_ESTADO, DESCRIPCION, NOMBRE, IMAGEN
    FROM PRODUCTOS WHERE ID_PRODUCTO = P_ID;
END;

PROCEDURE SP_GET_PRODUCTOS_ACTIVOS (P_DATOS OUT SYS_REFCURSOR)
AS
V_PRODUCTOS NUMBER;
BEGIN
    V_PRODUCTOS := FN_CONTAR_PRODUCTOS_REGISTRADOS;

    IF V_PRODUCTOS > 0 THEN
    OPEN P_DATOS FOR
    SELECT ID_PRODUCTO, PRECIO, ID_CATEGORIA, ID_ESTADO, DESCRIPCION, NOMBRE, IMAGEN
    FROM PRODUCTOS WHERE ID_ESTADO = 1;

    ELSE
    OPEN P_DATOS FOR
    SELECT 'No hay productos registrados' AS MENSAJE, NULL AS ID_PRODUCTO,  NULL AS CANTIDAD, NULL AS PRECIO, NULL AS ID_CATEGORIA, NULL AS ID_ESTADO, NULL AS DESCRIPCION, NULL AS NOMBRE
    FROM DUAL;
    END IF;
END SP_GET_PRODUCTOS_ACTIVOS;

PROCEDURE SP_OBTENER_PRODUCTO_POR_ID (P_DATOS OUT SYS_REFCURSOR, P_ID IN NUMBER) AS
BEGIN
    OPEN P_DATOS FOR
    SELECT ID_PRODUCTO, PRECIO, ID_CATEGORIA, ID_ESTADO, DESCRIPCION, NOMBRE, IMAGEN
    FROM PRODUCTOS WHERE ID_PRODUCTO = P_ID;
END;

-------------------------------------CRUD CATEGORIAS
 PROCEDURE SP_CRUD_CATEGORIAS (
    DESCRIPCION IN VARCHAR2,
    P_ID        IN NUMBER,
    P_ACCION    IN NUMBER
)
AS
    VSQL    VARCHAR2(1000);
    V_ERROR VARCHAR2(4000);
BEGIN
    -- Agregar
    IF P_ACCION = 1 THEN
        VSQL := 'INSERT INTO CATEGORIAS_PRODUCTOS (DESCRIPCION, ID_ESTADO) VALUES (:1,:2)';
        EXECUTE IMMEDIATE VSQL USING DESCRIPCION, 1;
        COMMIT;

    -- Actualizar
    ELSIF P_ACCION = 2 THEN
        VSQL := 'UPDATE CATEGORIAS_PRODUCTOS SET DESCRIPCION = :1 WHERE ID_CATEGORIA = :2';
        EXECUTE IMMEDIATE VSQL USING DESCRIPCION, P_ID;
        COMMIT;

    -- Desactivar
    ELSIF P_ACCION = 3 THEN
        -- Desactivar la categoría
        VSQL := 'UPDATE CATEGORIAS_PRODUCTOS SET ID_ESTADO = :1 WHERE ID_CATEGORIA = :2';
        EXECUTE IMMEDIATE VSQL USING 2, P_ID;

        -- Desactivar productos asociados
        VSQL := 'UPDATE PRODUCTOS SET ID_ESTADO = :1 WHERE ID_CATEGORIA = :2';
        EXECUTE IMMEDIATE VSQL USING 2, P_ID;
        COMMIT;

    -- Activar
    ELSIF P_ACCION = 4 THEN
        VSQL := 'UPDATE CATEGORIAS_PRODUCTOS SET ID_ESTADO = :1 WHERE ID_CATEGORIA = :2';
        EXECUTE IMMEDIATE VSQL USING 1, P_ID;
        COMMIT;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        V_ERROR := SQLERRM;
        INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'SP_CRUD_CATEGORIAS', USER, SYSDATE);
        RAISE_APPLICATION_ERROR(-20001, 'Error en SP_CRUD_CATEGORIAS: ' || V_ERROR);
END SP_CRUD_CATEGORIAS;

PROCEDURE SP_GET_PRODUCTOS_CATEGORIAS (
    P_DATOS OUT SYS_REFCURSOR,
    P_CATEGORIA IN NUMBER
) AS
    V_PRODUCTOS NUMBER;
    V_ERROR VARCHAR2(4000);
BEGIN
    V_PRODUCTOS := FN_CONTAR_PRODUCTOS_REGISTRADOS;

    IF V_PRODUCTOS > 0 THEN
        OPEN P_DATOS FOR
        SELECT ID_PRODUCTO, PRECIO, ID_CATEGORIA, ID_ESTADO, DESCRIPCION, NOMBRE, IMAGEN
        FROM PRODUCTOS 
        WHERE ID_ESTADO = 1 AND ID_CATEGORIA = P_CATEGORIA;
    ELSE
        OPEN P_DATOS FOR
        SELECT 'No hay productos registrados' AS MENSAJE, NULL AS ID_PRODUCTO, NULL AS PRECIO, 
               NULL AS ID_CATEGORIA, NULL AS ID_ESTADO, NULL AS DESCRIPCION, NULL AS NOMBRE, NULL AS IMAGEN
        FROM DUAL;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        V_ERROR := SQLERRM;
        INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'SP_GET_PRODUCTOS_CATEGORIAS', USER, SYSDATE);
        RAISE_APPLICATION_ERROR(-20001, 'Error en SP_GET_PRODUCTOS_CATEGORIAS: ' || V_ERROR);
END SP_GET_PRODUCTOS_CATEGORIAS;


END PKG_LEGADO;


DROP PROCEDURE SP_OBTENER_PRODUCTO_POR_ID
DROP PACKAGE PKG_CHECKOUT


CREATE OR REPLACE VIEW V_SELECCION_PRODUCTOS AS SELECT 

commit


--ALTERACIONES
ALTER TABLE PRODUCTOS ADD IMAGEN VARCHAR2(400)
ALTER TABLE PRODUCTOS DROP COLUMN CANTIDAD
ALTER TABLE PRODUCTOS MODIFY ID_PRODUCTO DEFAULT SEQ_PRODUCTOS.NEXTVAL


INSERT INTO PROVINCIAS (NOMBRE) VALUES ('San José');
INSERT INTO PROVINCIAS (NOMBRE) VALUES ('Alajuela');
INSERT INTO PROVINCIAS (NOMBRE) VALUES ('Cartago');
INSERT INTO PROVINCIAS (NOMBRE) VALUES ('Heredia');
INSERT INTO PROVINCIAS (NOMBRE) VALUES ('Guanacaste');
INSERT INTO PROVINCIAS (NOMBRE) VALUES ('Puntarenas');
INSERT INTO PROVINCIAS (NOMBRE) VALUES ('Limón');


--CREACION DE TABLA AUDITORIA ERRORES

CREATE SEQUENCE SEQ_AUDITORIA_ERRORES INCREMENT BY 1 START WITH 1
MAXVALUE 99999 MINVALUE 0;

CREATE TABLE AUDITORIA_ERRORES_LEGADO (
ID NUMBER DEFAULT SEQ_AUDITORIA_ERRORES.NEXTVAL PRIMARY KEY,
VERROR VARCHAR2(2000),
ORIGEN VARCHAR2(400),
VUSER VARCHAR2(100),
FECHA DATE
) TABLESPACE BD_LEGADO;


CREATE SEQUENCE SEQ_CONSULTAS INCREMENT BY 1 START WITH 1 MAXVALUE 99999 MINVALUE 0;
ALTER TABLE CONSULTAS MODIFY ID_CONSULTA DEFAULT SEQ_CONSULTAS.NEXTVAL