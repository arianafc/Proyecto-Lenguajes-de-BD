-- Eliminar el usuario y su esquema si ya existe
DROP USER admin CASCADE;

--Crear tablespace
CREATE TABLESPACE BD_Legado
DATAFILE 'C:\bd\19c\oradata\ORCL\BD_Legado.DBF'
SIZE 300M --Tama침o inicial del Datafile
AUTOEXTEND ON--Permitir que el Datafile crezca automaticamente cuando se llene
NEXT 30M--Incremento de tama침o cada vez que el Datafile necesite crecer
MAXSIZE 3G; --Tama침o m치ximo al que el Datafile puede crecer

-- Crear el usuario para la base de datos
CREATE USER admin IDENTIFIED BY admin;

-- Asignar privilegios al usuario
GRANT CONNECT, RESOURCE TO admin;

-- Otorgar permisos adicionales si es necesario
GRANT CREATE SESSION, CREATE TABLE, CREATE VIEW, CREATE SEQUENCE, CREATE PROCEDURE TO admin;

--ALTER USER PARA AGREGAR QUOTE EN EL TBS
ALTER USER ADMIN QUOTA UNLIMITED ON BD_LEGADO;

--CREACION TABLA ESTADOS
CREATE TABLE ESTADOS(
ID_ESTADO NUMBER CONSTRAINT ID_ESTADO_PK PRIMARY KEY,
DESCRIPCION VARCHAR2(100)
) TABLESPACE BD_LEGADO;

--CREACION DE TABLA ROLES
CREATE TABLE ROLES(
ID_ROL NUMBER CONSTRAINT ID_ROL_PK PRIMARY KEY,
DESCRIPCION VARCHAR2(100)
) TABLESPACE BD_LEGADO;

--CREACION DE TABLA USUARIOS
CREATE TABLE USUARIOS (
    ID_USUARIO NUMBER CONSTRAINT ID_USUARIO_PK PRIMARY KEY,
    NOMBRE VARCHAR2(100) NOT NULL,
    APELLIDO1 VARCHAR2(100) NOT NULL,
    APELLIDO2 VARCHAR2(100),
    EMAIL VARCHAR2(100) UNIQUE,
    ID_ESTADO NUMBER NOT NULL,
    USERNAME VARCHAR2(50) NOT NULL,
    CONTRASENA VARCHAR2(100) NOT NULL,
    ID_ROL NUMBER,
    CONSTRAINT ID_ESTADO_USUARIOS_FK FOREIGN KEY (ID_ESTADO) REFERENCES ESTADOS(ID_ESTADO),
    CONSTRAINT ID_ROL_USUARIOS_FK FOREIGN KEY (ID_ROL) REFERENCES ROLES(ID_ROL)
) TABLESPACE BD_LEGADO;
CREATE SEQUENCE SEQ_USUARIOS START WITH 3 INCREMENT BY 1;

--CREACION DE TABLA CARRITO
CREATE TABLE CARRITO(
    ID_CARRITO NUMBER CONSTRAINT ID_CARRITO_PK PRIMARY KEY,
    ID_USUARIO NUMBER,
    FECHA_CREACION DATE,
    CONSTRAINT ID_USUARIO_CARRITO_FK FOREIGN KEY (ID_USUARIO) REFERENCES USUARIOS(ID_USUARIO)
) TABLESPACE BD_LEGADO;
CREATE SEQUENCE SEQ_CARRITO START WITH 1 INCREMENT BY 1;

--CREACION DE TABLA CATEGORIA PRODUCTOS
CREATE TABLE CATEGORIAS_PRODUCTOS (
    ID_CATEGORIA NUMBER DEFAULT SEQ_CATEGORIAS.NEXTVAL CONSTRAINT ID_CATEGORIA_PK  PRIMARY KEY,
    DESCRIPCION VARCHAR2(100),
    ID_ESTADO NUMBER, 
    CONSTRAINT ID_ESTADO_CATEGORIA_FK FOREIGN KEY(ID_ESTADO) REFERENCES ESTADOS(ID_ESTADO)
) TABLESPACE BD_LEGADO;
CREATE SEQUENCE SEQ_CATEGORIAS INCREMENT BY 1 START WITH 1 MAXVALUE 99999 MINVALUE 0;

--CREACION DE TABLA PRODUCTOS
CREATE TABLE PRODUCTOS (
    ID_PRODUCTO NUMBER CONSTRAINT ID_PRODUCTO_PK PRIMARY KEY,
    CANTIDAD NUMBER NOT NULL,
    PRECIO DECIMAL(10,2) NOT NULL,
    ID_CATEGORIA NUMBER NOT NULL,
    ID_ESTADO NUMBER NOT NULL,
    DESCRIPCION VARCHAR2(100) NOT NULL,
    NOMBRE VARCHAR2(100) NOT NULL,
    IMAGEN VARCHAR2(400) NOT NULL,
    CONSTRAINT ID_CATEGORIA_PRODUCTOS_FK FOREIGN KEY(ID_CATEGORIA) REFERENCES CATEGORIAS_PRODUCTOS(ID_CATEGORIA),
    CONSTRAINT ID_ESTADO_PRODUCTOS_FK FOREIGN KEY(ID_ESTADO) REFERENCES ESTADOS(ID_ESTADO)
) TABLESPACE BD_LEGADO;
CREATE SEQUENCE SEQ_PRODUCTOS START WITH 1 INCREMENT BY 1;


--CREACION DE TABLA ARTICULOS_CARRITO
CREATE TABLE ARTICULOS_CARRITO (
    ID_ARTICULO NUMBER CONSTRAINT ID_ARTICULO_PK PRIMARY KEY,
    ID_CARRITO NUMBER,
    ID_PRODUCTO NUMBER,
    CANTIDAD NUMBER,
    CONSTRAINT ID_CARRITO_ARTICULOS_FK FOREIGN KEY(ID_CARRITO) REFERENCES CARRITO(ID_CARRITO),
    CONSTRAINT ID_PRODUCTO_CARRITO_FK FOREIGN KEY(ID_PRODUCTO) REFERENCES PRODUCTOS(ID_PRODUCTO)
) TABLESPACE BD_LEGADO;
CREATE SEQUENCE SEQ_ARTICULO_CARRITO START WITH 1 INCREMENT BY 1;

--CREACION DE TABLA INVENTARIO
CREATE TABLE INVENTARIO(
    ID_INVENTARIO NUMBER CONSTRAINT ID_INVENTARIO_PK PRIMARY KEY,
    NOMBRE VARCHAR2(100) NOT NULL,
    CANTIDAD NUMBER NOT NULL,
    ID_ESTADO NUMBER,
    CONSTRAINT ID_ESTADO_INVENTARIO_FK FOREIGN KEY (ID_ESTADO) REFERENCES ESTADOS(ID_ESTADO)
) TABLESPACE BD_LEGADO;
CREATE SEQUENCE SEQ_INVENTARIO START WITH 1 INCREMENT BY 1;

--CREACION DE TABLA CONSULTAS

CREATE TABLE CONSULTAS (
    ID_CONSULTA NUMBER DEFAULT SEQ_CONSULTAS.NEXTVAL CONSTRAINT ID_CONSULTA_PK  PRIMARY KEY,  
    ID_USUARIO NUMBER,               
    TIPO VARCHAR2(50),              
    MENSAJE VARCHAR2(4000),                   
    ID_ESTADO NUMBER,  
    FECHA DATE,          
    CONSTRAINT ID_USUARIO_CONSULTAS_FK FOREIGN KEY (ID_USUARIO) REFERENCES USUARIOS(ID_USUARIO),
    CONSTRAINT ID_ESTADO_CONSULTA_FK FOREIGN KEY (ID_ESTADO) REFERENCES ESTADOS(ID_ESTADO)
) TABLESPACE BD_LEGADO;

CREATE SEQUENCE SEQ_CONSULTAS INCREMENT BY 1 START WITH 1 MAXVALUE 99999 MINVALUE 0;
ALTER TABLE CONSULTAS MODIFY ID_CONSULTA DEFAULT SEQ_CONSULTAS.NEXTVAL

--CREACION TABLA PEDIDOS
CREATE TABLE PEDIDOS(
    ID_PEDIDO NUMBER CONSTRAINT ID_PEDIDO_PK PRIMARY KEY,
    FECHA DATE NOT NULL,
    ID_USUARIO NUMBER,
    ID_ESTADO NUMBER,
    SUBTOTAL DECIMAL(10,2),
    TOTAL DECIMAL(10,2),
    METODO_PAGO VARCHAR2(100),
    CONSTRAINT ID_USUARIO_PEDIDOS_FK FOREIGN KEY(ID_USUARIO) REFERENCES USUARIOS(ID_USUARIO),
    CONSTRAINT ID_ESTADO_PEDIDOS_FK FOREIGN KEY(ID_ESTADO) REFERENCES ESTADOS(ID_ESTADO)
) TABLESPACE BD_LEGADO;
CREATE SEQUENCE SEQ_PEDIDOS START WITH 1 INCREMENT BY 1;

--CREACION TABLA PEDIDOS DETALLES
CREATE TABLE PEDIDOS_DETALLES (
    ID_PEDIDO_DETALLE NUMBER CONSTRAINT ID_PEDIDO_DETALLE_PK PRIMARY KEY,
    CANTIDAD NUMBER,
    ID_PEDIDO NUMBER,
    ID_PRODUCTO NUMBER,
    CONSTRAINT ID_PEDIDO_PEDIDOS_DETALLES_FK FOREIGN KEY(ID_PEDIDO) REFERENCES PEDIDOS(ID_PEDIDO),
    CONSTRAINT ID_PRODUCTO_PEDIDOS_FK FOREIGN KEY(ID_PRODUCTO) REFERENCES PRODUCTOS(ID_PRODUCTO)
) TABLESPACE BD_LEGADO;
CREATE SEQUENCE SEQ_PEDIDOS_DETALLES INCREMENT BY 1 START WITH 1 MAXVALUE 99999 MINVALUE 0;
--CREACION DE TABLA PROVINCIAS
CREATE TABLE PROVINCIAS(
ID_PROVINCIA NUMBER CONSTRAINT ID_PROVINCIA_PK PRIMARY KEY,
NOMBRE VARCHAR2(100)
) TABLESPACE BD_LEGADO;
CREATE SEQUENCE SEQ_PROVINCIAS INCREMENT BY 1 START WITH 1 MAXVALUE 99999 MINVALUE 0;
--CREACION DE TABLA CANTONES

CREATE TABLE CANTONES(
ID_CANTON NUMBER DEFAULT SEQ_CANTONES.NEXTVAL CONSTRAINT ID_CANTON_PK  PRIMARY KEY,
NOMBRE VARCHAR2(100),
ID_PROVINCIA NUMBER,
CONSTRAINT ID_PROVINCIA_CANTON_FK FOREIGN KEY (ID_PROVINCIA) REFERENCES PROVINCIAS(ID_PROVINCIA)
) TABLESPACE BD_LEGADO;
CREATE SEQUENCE SEQ_CANTONES INCREMENT BY 1 START WITH 1 MAXVALUE 99999 MINVALUE 0;

--CREACION DE TABLA DISTRITOS
CREATE TABLE DISTRITOS (
ID_DISTRITO NUMBER DEFAULT SEQ_DISTRITOS.NEXTVAL CONSTRAINT ID_DISTRITO_PK PRIMARY KEY,
NOMBRE VARCHAR2(100),
ID_CANTON NUMBER,
CONSTRAINT ID_CANTON_DISTRITO_FK FOREIGN KEY (ID_CANTON) REFERENCES CANTONES(ID_CANTON)
) TABLESPACE BD_LEGADO;
CREATE SEQUENCE SEQ_DISTRITOS INCREMENT BY 1 START WITH 1 MAXVALUE 99999 MINVALUE 0;

--CREACION TABLA DIRECCIONES
CREATE TABLE DIRECCIONES(
    ID_DIRECCION NUMBER DEFAULT SEQ_DIRECCIONES.NEXTVAL CONSTRAINT ID_DIRECCION_PK  PRIMARY KEY,
    DIRECCION_EXACTA VARCHAR2(255),
    ID_DISTRITO NUMBER,
    ID_USUARIO NUMBER,
    CONSTRAINT ID_DIRECCION_DISTRITO_FK FOREIGN KEY (ID_DISTRITO) REFERENCES DISTRITOS(ID_DISTRITO),
    CONSTRAINT ID_USUARIO_DIRECCION_FK FOREIGN KEY (ID_USUARIO) REFERENCES USUARIOS(ID_USUARIO)
)TABLESPACE BD_LEGADO;
CREATE SEQUENCE SEQ_DIRECCIONES INCREMENT BY 1 START WITH 1 MAXVALUE 99999 MINVALUE 0;

--CREACION DE TABLA TELEFONOS
CREATE TABLE TELEFONOS(
    ID_TELEFONO  NUMBER DEFAULT SEQ_TELEFONOS.NEXTVAL CONSTRAINT ID_TELEFONO_PK PRIMARY KEY,
    TELEFONO VARCHAR2(255),
    ID_ESTADO NUMBER,
    ID_USUARIO NUMBER,
    CONSTRAINT ID_ESTADO_TELEFONO_FK FOREIGN KEY (ID_ESTADO) REFERENCES ESTADOS(ID_ESTADO),
    CONSTRAINT ID_USUARIO_TELEFONO_FK FOREIGN KEY (ID_USUARIO) REFERENCES USUARIOS(ID_USUARIO)
)TABLESPACE BD_LEGADO;
CREATE SEQUENCE SEQ_TELEFONOS INCREMENT BY 1 START WITH 1 MAXVALUE 99999 MINVALUE 0;
--CREACION DE TABLA USUARIOS PARA AUDITORIA

CREATE TABLE AUDITORIA_USUARIOS (
    ID_AUDITORIA NUMBER CONSTRAINT ID_USUARIO_AUDITORIA_PK PRIMARY KEY,
    ID_USUARIO NUMBER NOT NULL,
    NOMBRE_ANTERIOR VARCHAR2(100),
    NOMBRE_NUEVO VARCHAR2(100),
    APELLIDO1_ANTERIOR VARCHAR2(100),
    APELLIDO1_NUEVO VARCHAR2(100),
    APELLIDO2_ANTERIOR VARCHAR2(100),
    APELLIDO2_NUEVO VARCHAR2(100),
    EMAIL_ANTERIOR VARCHAR2(100),
    EMAIL_NUEVO VARCHAR2(100),
    ID_ESTADO_ANTERIOR NUMBER,
    ID_ESTADO_NUEVO NUMBER,
    USERNAME_ANTERIOR VARCHAR2(50),
    USERNAME_NUEVO VARCHAR2(50),
    CONTRASENA_ANTERIOR VARCHAR2(100),
    CONTRASENA_NUEVO VARCHAR2(100),
    ID_ROL_ANTERIOR NUMBER,
    ID_ROL_NUEVO NUMBER,
    TIPO_OPERACION VARCHAR2(10) NOT NULL, 
    FECHA_OPERACION DATE DEFAULT SYSDATE NOT NULL,
    USUARIO_OPERACION VARCHAR2(100) NOT NULL
) TABLESPACE BD_LEGADO;
CREATE SEQUENCE SEQ_USUARIOS_AUDITORIA START WITH 1 INCREMENT BY 1;

CREATE TABLE AUDITORIA_INVENTARIO (
    ID_AUDITORIA NUMBER CONSTRAINT ID_INVENTARIO_AUDITORIA_PK PRIMARY KEY,
    ID_INVENTARIO NUMBER NOT NULL,
    NOMBRE_ANTERIOR VARCHAR2(100),
    NOMBRE_NUEVO VARCHAR2(100),
    CANTIDAD_ANTERIOR NUMBER,
    CANTIDAD_NUEVA NUMBER, 
    ID_ESTADO_ANTERIOR NUMBER,
    ID_ESTADO_NUEVO NUMBER,
    TIPO_OPERACION VARCHAR2(10) NOT NULL, 
    FECHA_OPERACION DATE DEFAULT SYSDATE NOT NULL,
    USUARIO_OPERACION VARCHAR2(100) NOT NULL
) TABLESPACE BD_LEGADO;
CREATE SEQUENCE SEQ_INVENTARIOS_AUDITORIA START WITH 1 INCREMENT BY 1;

CREATE TABLE AUDITORIA_PRODUCTOS (
    ID_AUDITORIA NUMBER PRIMARY KEY,
    ID_PRODUCTO NUMBER,
    
    NOMBRE_ANTERIOR VARCHAR2(100),
    NOMBRE_NUEVO VARCHAR2(100),
    
    PRECIO_ANTERIOR NUMBER(10,2),
    PRECIO_NUEVO NUMBER(10,2),
    
    ID_CATEGORIA_ANTERIOR NUMBER,
    ID_CATEGORIA_NUEVA NUMBER,
    
    ID_ESTADO_ANTERIOR NUMBER,
    ID_ESTADO_NUEVO NUMBER,
    
    DESCRIPCION_ANTERIOR VARCHAR2(100),
    DESCRIPCION_NUEVA VARCHAR2(100),
    
    IMAGEN_ANTERIOR VARCHAR2(400),
    IMAGEN_NUEVA VARCHAR2(400),
    
    TIPO_OPERACION VARCHAR2(10),
    USUARIO_OPERACION VARCHAR2(30),
    FECHA_OPERACION DATE default sysdate
) TABLESPACE BD_LEGADO;
CREATE SEQUENCE SEQ_PRODUCTOS_AUDITORIA START WITH 1 INCREMENT BY 1;

CREATE TABLE AUDITORIA_ERRORES_LEGADO (
ID NUMBER DEFAULT SEQ_AUDITORIA_ERRORES.NEXTVAL PRIMARY KEY,
VERROR VARCHAR2(2000),
ORIGEN VARCHAR2(400),
VUSER VARCHAR2(100),
FECHA DATE
) TABLESPACE BD_LEGADO;

CREATE SEQUENCE SEQ_AUDITORIA_ERRORES INCREMENT BY 1 START WITH 1
MAXVALUE 99999 MINVALUE 0;

--INSERTS TABLA ESTADOS 

INSERT INTO ESTADOS (ID_ESTADO, DESCRIPCION) VALUES (1,'ACTIVO');
INSERT INTO ESTADOS (ID_ESTADO, DESCRIPCION) VALUES (2,'INACTIVO');
INSERT INTO ESTADOS (ID_ESTADO, DESCRIPCION) VALUES (3,'EN PROCESO');
INSERT INTO ESTADOS (ID_ESTADO, DESCRIPCION) VALUES (4,'NUEVO');
INSERT INTO ESTADOS (ID_ESTADO, DESCRIPCION) VALUES (5,'ENTREGADO');
INSERT INTO ESTADOS (ID_ESTADO, DESCRIPCION) VALUES (6,'CONTESTADA');
INSERT INTO ESTADOS (ID_ESTADO, DESCRIPCION) VALUES (7,'EN CAMINO');
INSERT INTO ESTADOS (ID_ESTADO, DESCRIPCION) VALUES (8,'CANCELADO');

--INSERTS TABLA ROLES 

INSERT INTO ROLES (ID_ROL, DESCRIPCION) VALUES (1,'COMPRADOR');
INSERT INTO ROLES (ID_ROL, DESCRIPCION) VALUES (2,'ADMINISTRADOR');

--CREACION DE VISTAS

--VISTA DE USUARIOS LOGIN
CREATE OR REPLACE VIEW V_USUARIOS_ROLES AS
SELECT 
    U.ID_USUARIO,
    U.NOMBRE,
    U.APELLIDO1,
    U.APELLIDO2,
    U.EMAIL,
    U.ID_ESTADO,
    U.USERNAME,
    U.CONTRASENA,
    U.ID_ROL,
    C.ID_CARRITO,
    R.DESCRIPCION AS ROL_DESCRIPCION
FROM 
    USUARIOS U
JOIN 
    ROLES R ON U.ID_ROL = R.ID_ROL
JOIN 
    CARRITO C ON C.ID_USUARIO = U.ID_USUARIO;

--CREACION DE TRIGGERS

--TRIGGER QUE REGISTRA EL MOVIMIENTO REALIZADO EN LA TABLA USUARIOS PARA ALMACENARLO EN LA TABLA AUDITORIA

CREATE OR REPLACE TRIGGER TRG_USUARIOS_AUDITORIA
AFTER INSERT OR UPDATE OR DELETE ON USUARIOS
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        -- Registrar una inserci칩n
        INSERT INTO AUDITORIA_USUARIOS (
            ID_AUDITORIA, ID_USUARIO, NOMBRE_NUEVO, APELLIDO1_NUEVO, APELLIDO2_NUEVO,
            EMAIL_NUEVO, ID_ESTADO_NUEVO, USERNAME_NUEVO, CONTRASENA_NUEVO, ID_ROL_NUEVO,
            TIPO_OPERACION, USUARIO_OPERACION
        ) VALUES (
            seq_auditoria_usuarios.NEXTVAL, :NEW.ID_USUARIO, :NEW.NOMBRE, :NEW.APELLIDO1, :NEW.APELLIDO2,
            :NEW.EMAIL, :NEW.ID_ESTADO, :NEW.USERNAME, :NEW.CONTRASENA, :NEW.ID_ROL,
            'INSERT', USER
        );
    ELSIF UPDATING THEN
        -- Registrar una actualizaci칩n
        INSERT INTO AUDITORIA_USUARIOS (
            ID_AUDITORIA, ID_USUARIO, NOMBRE_ANTERIOR, NOMBRE_NUEVO, APELLIDO1_ANTERIOR, APELLIDO1_NUEVO,
            APELLIDO2_ANTERIOR, APELLIDO2_NUEVO, EMAIL_ANTERIOR, EMAIL_NUEVO, ID_ESTADO_ANTERIOR, ID_ESTADO_NUEVO,
            USERNAME_ANTERIOR, USERNAME_NUEVO, CONTRASENA_ANTERIOR, CONTRASENA_NUEVO, ID_ROL_ANTERIOR, ID_ROL_NUEVO,
            TIPO_OPERACION, USUARIO_OPERACION
        ) VALUES (
            seq_auditoria_usuarios.NEXTVAL, :OLD.ID_USUARIO, :OLD.NOMBRE, :NEW.NOMBRE, :OLD.APELLIDO1, :NEW.APELLIDO1,
            :OLD.APELLIDO2, :NEW.APELLIDO2, :OLD.EMAIL, :NEW.EMAIL, :OLD.ID_ESTADO, :NEW.ID_ESTADO,
            :OLD.USERNAME, :NEW.USERNAME, :OLD.CONTRASENA, :NEW.CONTRASENA, :OLD.ID_ROL, :NEW.ID_ROL,
            'UPDATE', USER
        );
    ELSIF DELETING THEN
        -- Registrar una eliminaci칩n
        INSERT INTO AUDITORIA_USUARIOS (
            ID_AUDITORIA, ID_USUARIO, NOMBRE_ANTERIOR, APELLIDO1_ANTERIOR, APELLIDO2_ANTERIOR,
            EMAIL_ANTERIOR, ID_ESTADO_ANTERIOR, USERNAME_ANTERIOR, CONTRASENA_ANTERIOR, ID_ROL_ANTERIOR,
            TIPO_OPERACION, USUARIO_OPERACION
        ) VALUES (
            seq_auditoria_usuarios.NEXTVAL, :OLD.ID_USUARIO, :OLD.NOMBRE, :OLD.APELLIDO1, :OLD.APELLIDO2,
            :OLD.EMAIL, :OLD.ID_ESTADO, :OLD.USERNAME, :OLD.CONTRASENA, :OLD.ID_ROL,
            'DELETE', USER
        );
    END IF;
END;

--TRIGGER QUE REGISTRA EL MOVIMIENTO REALIZADO EN LA TABLA PRODUCTOS PARA ALMACENARLO EN LA TABLA AUDITORIA

CREATE OR REPLACE TRIGGER TRG_AUDITORIA_PRODUCTOS
AFTER INSERT OR UPDATE OR DELETE ON PRODUCTOS
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO AUDITORIA_PRODUCTOS (
            ID_AUDITORIA, ID_PRODUCTO, NOMBRE_NUEVO, PRECIO_NUEVO, 
            ID_CATEGORIA_NUEVA, ID_ESTADO_NUEVO, DESCRIPCION_NUEVA, IMAGEN_NUEVA,
            TIPO_OPERACION, USUARIO_OPERACION
        ) VALUES (
            SEQ_AUDITORIA_PRODUCTOS.NEXTVAL, :NEW.ID_PRODUCTO, :NEW.NOMBRE, :NEW.PRECIO, 
            :NEW.ID_CATEGORIA, :NEW.ID_ESTADO, :NEW.DESCRIPCION, :NEW.IMAGEN,
            'INSERT', USER
        );

    ELSIF UPDATING THEN
        INSERT INTO AUDITORIA_PRODUCTOS (
            ID_AUDITORIA, ID_PRODUCTO, NOMBRE_ANTERIOR, NOMBRE_NUEVO, 
            PRECIO_ANTERIOR, PRECIO_NUEVO, 
            ID_CATEGORIA_ANTERIOR, ID_CATEGORIA_NUEVA, 
            ID_ESTADO_ANTERIOR, ID_ESTADO_NUEVO, 
            DESCRIPCION_ANTERIOR, DESCRIPCION_NUEVA, 
            IMAGEN_ANTERIOR, IMAGEN_NUEVA, 
            TIPO_OPERACION, USUARIO_OPERACION
        ) VALUES (
            SEQ_AUDITORIA_PRODUCTOS.NEXTVAL, :OLD.ID_PRODUCTO, :OLD.NOMBRE, :NEW.NOMBRE, 
            :OLD.PRECIO, :NEW.PRECIO, 
            :OLD.ID_CATEGORIA, :NEW.ID_CATEGORIA, 
            :OLD.ID_ESTADO, :NEW.ID_ESTADO, 
            :OLD.DESCRIPCION, :NEW.DESCRIPCION, 
            :OLD.IMAGEN, :NEW.IMAGEN, 
            'UPDATE', USER
        );

    ELSIF DELETING THEN
        INSERT INTO AUDITORIA_PRODUCTOS (
            ID_AUDITORIA, ID_PRODUCTO, NOMBRE_ANTERIOR, PRECIO_ANTERIOR, 
            ID_CATEGORIA_ANTERIOR, ID_ESTADO_ANTERIOR, DESCRIPCION_ANTERIOR, IMAGEN_ANTERIOR,
            TIPO_OPERACION, USUARIO_OPERACION
        ) VALUES (
            SEQ_AUDITORIA_PRODUCTOS.NEXTVAL, :OLD.ID_PRODUCTO, :OLD.NOMBRE, :OLD.PRECIO, 
            :OLD.ID_CATEGORIA, :OLD.ID_ESTADO, :OLD.DESCRIPCION, :OLD.IMAGEN,
            'DELETE', USER
        );
    END IF;
END TRG_AUDITORIA_PRODUCTOS;


--TRIGGER QUE REGISTRA EL MOVIMIENTO REALIZADO EN LA TABLA INVENTARIOS PARA ALMACENARLO EN LA TABLA AUDITORIA

CREATE OR REPLACE TRIGGER TRG_INVENTARIO_AUDITORIA
AFTER INSERT OR UPDATE OR DELETE ON INVENTARIO
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO AUDITORIA_INVENTARIO (
            ID_AUDITORIA, ID_INVENTARIO, NOMBRE_NUEVO, CANTIDAD_NUEVA, ID_ESTADO_NUEVO,
            TIPO_OPERACION, USUARIO_OPERACION
        ) VALUES (
            SEQ_AUDITORIA_INVENTARIO.NEXTVAL, :NEW.ID_INVENTARIO, :NEW.NOMBRE, :NEW.CANTIDAD, :NEW.ID_ESTADO,
            'INSERT', USER
        );
    
    ELSIF UPDATING THEN
        INSERT INTO AUDITORIA_INVENTARIO (
            ID_AUDITORIA, ID_INVENTARIO, NOMBRE_ANTERIOR, NOMBRE_NUEVO, CANTIDAD_ANTERIOR, CANTIDAD_NUEVA, 
            ID_ESTADO_ANTERIOR, ID_ESTADO_NUEVO, TIPO_OPERACION, USUARIO_OPERACION
        ) VALUES (
            SEQ_AUDITORIA_INVENTARIO.NEXTVAL, :OLD.ID_INVENTARIO, :OLD.NOMBRE, :NEW.NOMBRE, :OLD.CANTIDAD, :NEW.CANTIDAD,
            :OLD.ID_ESTADO, :NEW.ID_ESTADO, 'UPDATE', USER
        );
    
    ELSIF DELETING THEN
        INSERT INTO AUDITORIA_INVENTARIO (
            ID_AUDITORIA, ID_INVENTARIO, NOMBRE_ANTERIOR, CANTIDAD_ANTERIOR, ID_ESTADO_ANTERIOR, 
            TIPO_OPERACION, USUARIO_OPERACION
        ) VALUES (
            SEQ_AUDITORIA_INVENTARIO.NEXTVAL, :OLD.ID_INVENTARIO, :OLD.NOMBRE, :OLD.CANTIDAD, :OLD.ID_ESTADO,
            'DELETE', USER
        );
    END IF;
END;

--Funciones
-- 1. Funcion para calcular el total de un carrito de compras
CREATE OR REPLACE FUNCTION CALCULAR_TOTAL_CARRITO(p_id_carrito NUMBER) RETURN NUMBER IS
    v_total NUMBER := 0;
BEGIN
    SELECT COALESCE(SUM(ac.CANTIDAD * p.PRECIO), 0)
    INTO v_total
    FROM ARTICULOS_CARRITO ac
    JOIN PRODUCTOS p ON ac.ID_PRODUCTO = p.ID_PRODUCTO
    WHERE ac.ID_CARRITO = p_id_carrito;
    
    RETURN v_total;
END;

-------------------------------------------------------------------------------------------------------------------
--PACKAGE CON SP Y FUNCIONES
