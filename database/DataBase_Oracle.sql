-- Eliminar el usuario y su esquema si ya existe
DROP USER admin CASCADE;

--Crear tablespace
CREATE TABLESPACE BD_Legado
DATAFILE 'C:\bd\19c\oradata\ORCL\BD_Legado.DBF'
SIZE 300M --Tama침o inicial del Datafile
AUTOEXTEND ON--Permitir que el Datafile crezca automaticamente cuando se llene
NEXT 30M--Incremento de tama침o cada vez que el Datafile necesite crecer
MAXSIZE 3G; --Tama침o m치ximo al que el Datafile puede crecer

-- Crear el usuario para la base de datos
CREATE USER admin IDENTIFIED BY admin;

-- Asignar privilegios al usuario
GRANT CONNECT, RESOURCE TO admin;

-- Otorgar permisos adicionales si es necesario
GRANT CREATE SESSION, CREATE TABLE, CREATE VIEW, CREATE SEQUENCE, CREATE PROCEDURE TO admin;

--ALTER USER PARA AGREGAR QUOTE EN EL TBS
ALTER USER ADMIN QUOTA UNLIMITED ON BD_LEGADO;

--CREACION TABLA ESTADOS
CREATE TABLE ESTADOS(
ID_ESTADO NUMBER CONSTRAINT ID_ESTADO_PK PRIMARY KEY,
DESCRIPCION VARCHAR2(100)
) TABLESPACE BD_LEGADO;

--CREACION DE TABLA ROLES
CREATE TABLE ROLES(
ID_ROL NUMBER CONSTRAINT ID_ROL_PK PRIMARY KEY,
DESCRIPCION VARCHAR2(100)
) TABLESPACE BD_LEGADO;

--CREACION DE TABLA USUARIOS
CREATE TABLE USUARIOS (
    ID_USUARIO NUMBER CONSTRAINT ID_USUARIO_PK PRIMARY KEY,
    NOMBRE VARCHAR2(100) NOT NULL,
    APELLIDO1 VARCHAR2(100) NOT NULL,
    APELLIDO2 VARCHAR2(100),
    EMAIL VARCHAR2(100) UNIQUE,
    ID_ESTADO NUMBER NOT NULL,
    USERNAME VARCHAR2(50) NOT NULL,
    CONTRASENA VARCHAR2(100) NOT NULL,
    ID_ROL NUMBER,
    CONSTRAINT ID_ESTADO_USUARIOS_FK FOREIGN KEY (ID_ESTADO) REFERENCES ESTADOS(ID_ESTADO),
    CONSTRAINT ID_ROL_USUARIOS_FK FOREIGN KEY (ID_ROL) REFERENCES ROLES(ID_ROL)
) TABLESPACE BD_LEGADO;
CREATE SEQUENCE SEQ_USUARIOS START WITH 3 INCREMENT BY 1;

--CREACION DE TABLA CARRITO
CREATE TABLE CARRITO(
    ID_CARRITO NUMBER CONSTRAINT ID_CARRITO_PK PRIMARY KEY,
    ID_USUARIO NUMBER,
    FECHA_CREACION DATE,
    CONSTRAINT ID_USUARIO_CARRITO_FK FOREIGN KEY (ID_USUARIO) REFERENCES USUARIOS(ID_USUARIO)
) TABLESPACE BD_LEGADO;
CREATE SEQUENCE SEQ_CARRITO START WITH 1 INCREMENT BY 1;

--CREACION DE TABLA CATEGORIA PRODUCTOS
CREATE TABLE CATEGORIAS_PRODUCTOS (
    ID_CATEGORIA NUMBER DEFAULT SEQ_CATEGORIAS.NEXTVAL CONSTRAINT ID_CATEGORIA_PK  PRIMARY KEY,
    DESCRIPCION VARCHAR2(100),
    ID_ESTADO NUMBER, 
    CONSTRAINT ID_ESTADO_CATEGORIA_FK FOREIGN KEY(ID_ESTADO) REFERENCES ESTADOS(ID_ESTADO)
) TABLESPACE BD_LEGADO;
CREATE SEQUENCE SEQ_CATEGORIAS INCREMENT BY 1 START WITH 1 MAXVALUE 99999 MINVALUE 0;

--CREACION DE TABLA PRODUCTOS
CREATE TABLE PRODUCTOS (
    ID_PRODUCTO NUMBER CONSTRAINT ID_PRODUCTO_PK PRIMARY KEY,
    CANTIDAD NUMBER NOT NULL,
    PRECIO DECIMAL(10,2) NOT NULL,
    ID_CATEGORIA NUMBER NOT NULL,
    ID_ESTADO NUMBER NOT NULL,
    DESCRIPCION VARCHAR2(100) NOT NULL,
    NOMBRE VARCHAR2(100) NOT NULL,
    IMAGEN VARCHAR2(400) NOT NULL,
    CONSTRAINT ID_CATEGORIA_PRODUCTOS_FK FOREIGN KEY(ID_CATEGORIA) REFERENCES CATEGORIAS_PRODUCTOS(ID_CATEGORIA),
    CONSTRAINT ID_ESTADO_PRODUCTOS_FK FOREIGN KEY(ID_ESTADO) REFERENCES ESTADOS(ID_ESTADO)
) TABLESPACE BD_LEGADO;
CREATE SEQUENCE SEQ_PRODUCTOS START WITH 1 INCREMENT BY 1;


--CREACION DE TABLA ARTICULOS_CARRITO
CREATE TABLE ARTICULOS_CARRITO (
    ID_ARTICULO NUMBER CONSTRAINT ID_ARTICULO_PK PRIMARY KEY,
    ID_CARRITO NUMBER,
    ID_PRODUCTO NUMBER,
    CANTIDAD NUMBER,
    CONSTRAINT ID_CARRITO_ARTICULOS_FK FOREIGN KEY(ID_CARRITO) REFERENCES CARRITO(ID_CARRITO),
    CONSTRAINT ID_PRODUCTO_CARRITO_FK FOREIGN KEY(ID_PRODUCTO) REFERENCES PRODUCTOS(ID_PRODUCTO)
) TABLESPACE BD_LEGADO;
CREATE SEQUENCE SEQ_ARTICULO_CARRITO START WITH 1 INCREMENT BY 1;

--CREACION DE TABLA INVENTARIO
CREATE TABLE INVENTARIO(
    ID_INVENTARIO NUMBER CONSTRAINT ID_INVENTARIO_PK PRIMARY KEY,
    NOMBRE VARCHAR2(100) NOT NULL,
    CANTIDAD NUMBER NOT NULL,
    ID_ESTADO NUMBER,
    CONSTRAINT ID_ESTADO_INVENTARIO_FK FOREIGN KEY (ID_ESTADO) REFERENCES ESTADOS(ID_ESTADO)
) TABLESPACE BD_LEGADO;
CREATE SEQUENCE SEQ_INVENTARIO START WITH 1 INCREMENT BY 1;

--CREACION DE TABLA CONSULTAS

CREATE TABLE CONSULTAS (
    ID_CONSULTA NUMBER DEFAULT SEQ_CONSULTAS.NEXTVAL CONSTRAINT ID_CONSULTA_PK  PRIMARY KEY,  
    ID_USUARIO NUMBER,               
    TIPO VARCHAR2(50),              
    MENSAJE VARCHAR2(4000),                   
    ID_ESTADO NUMBER,  
    FECHA DATE,          
    CONSTRAINT ID_USUARIO_CONSULTAS_FK FOREIGN KEY (ID_USUARIO) REFERENCES USUARIOS(ID_USUARIO),
    CONSTRAINT ID_ESTADO_CONSULTA_FK FOREIGN KEY (ID_ESTADO) REFERENCES ESTADOS(ID_ESTADO)
) TABLESPACE BD_LEGADO;

CREATE SEQUENCE SEQ_CONSULTAS INCREMENT BY 1 START WITH 1 MAXVALUE 99999 MINVALUE 0;
ALTER TABLE CONSULTAS MODIFY ID_CONSULTA DEFAULT SEQ_CONSULTAS.NEXTVAL

--CREACION TABLA PEDIDOS
CREATE TABLE PEDIDOS(
    ID_PEDIDO NUMBER CONSTRAINT ID_PEDIDO_PK PRIMARY KEY,
    FECHA DATE NOT NULL,
    ID_USUARIO NUMBER,
    ID_ESTADO NUMBER,
    SUBTOTAL DECIMAL(10,2),
    TOTAL DECIMAL(10,2),
    METODO_PAGO VARCHAR2(100),
    CONSTRAINT ID_USUARIO_PEDIDOS_FK FOREIGN KEY(ID_USUARIO) REFERENCES USUARIOS(ID_USUARIO),
    CONSTRAINT ID_ESTADO_PEDIDOS_FK FOREIGN KEY(ID_ESTADO) REFERENCES ESTADOS(ID_ESTADO)
) TABLESPACE BD_LEGADO;
CREATE SEQUENCE SEQ_PEDIDOS START WITH 1 INCREMENT BY 1;

--CREACION TABLA PEDIDOS DETALLES
CREATE TABLE PEDIDOS_DETALLES (
    ID_PEDIDO_DETALLE NUMBER CONSTRAINT ID_PEDIDO_DETALLE_PK PRIMARY KEY,
    CANTIDAD NUMBER,
    ID_PEDIDO NUMBER,
    ID_PRODUCTO NUMBER,
    CONSTRAINT ID_PEDIDO_PEDIDOS_DETALLES_FK FOREIGN KEY(ID_PEDIDO) REFERENCES PEDIDOS(ID_PEDIDO),
    CONSTRAINT ID_PRODUCTO_PEDIDOS_FK FOREIGN KEY(ID_PRODUCTO) REFERENCES PRODUCTOS(ID_PRODUCTO)
) TABLESPACE BD_LEGADO;
CREATE SEQUENCE SEQ_PEDIDOS_DETALLES INCREMENT BY 1 START WITH 1 MAXVALUE 99999 MINVALUE 0;
--CREACION DE TABLA PROVINCIAS
CREATE TABLE PROVINCIAS(
ID_PROVINCIA NUMBER CONSTRAINT ID_PROVINCIA_PK PRIMARY KEY,
NOMBRE VARCHAR2(100)
) TABLESPACE BD_LEGADO;
CREATE SEQUENCE SEQ_PROVINCIAS INCREMENT BY 1 START WITH 1 MAXVALUE 99999 MINVALUE 0;
--CREACION DE TABLA CANTONES

CREATE TABLE CANTONES(
ID_CANTON NUMBER DEFAULT SEQ_CANTONES.NEXTVAL CONSTRAINT ID_CANTON_PK  PRIMARY KEY,
NOMBRE VARCHAR2(100),
ID_PROVINCIA NUMBER,
CONSTRAINT ID_PROVINCIA_CANTON_FK FOREIGN KEY (ID_PROVINCIA) REFERENCES PROVINCIAS(ID_PROVINCIA)
) TABLESPACE BD_LEGADO;
CREATE SEQUENCE SEQ_CANTONES INCREMENT BY 1 START WITH 1 MAXVALUE 99999 MINVALUE 0;

--CREACION DE TABLA DISTRITOS
CREATE TABLE DISTRITOS (
ID_DISTRITO NUMBER DEFAULT SEQ_DISTRITOS.NEXTVAL CONSTRAINT ID_DISTRITO_PK PRIMARY KEY,
NOMBRE VARCHAR2(100),
ID_CANTON NUMBER,
CONSTRAINT ID_CANTON_DISTRITO_FK FOREIGN KEY (ID_CANTON) REFERENCES CANTONES(ID_CANTON)
) TABLESPACE BD_LEGADO;
CREATE SEQUENCE SEQ_DISTRITOS INCREMENT BY 1 START WITH 1 MAXVALUE 99999 MINVALUE 0;

--CREACION TABLA DIRECCIONES
CREATE TABLE DIRECCIONES(
    ID_DIRECCION NUMBER DEFAULT SEQ_DIRECCIONES.NEXTVAL CONSTRAINT ID_DIRECCION_PK  PRIMARY KEY,
    DIRECCION_EXACTA VARCHAR2(255),
    ID_DISTRITO NUMBER,
    ID_USUARIO NUMBER,
    CONSTRAINT ID_DIRECCION_DISTRITO_FK FOREIGN KEY (ID_DISTRITO) REFERENCES DISTRITOS(ID_DISTRITO),
    CONSTRAINT ID_USUARIO_DIRECCION_FK FOREIGN KEY (ID_USUARIO) REFERENCES USUARIOS(ID_USUARIO)
)TABLESPACE BD_LEGADO;
CREATE SEQUENCE SEQ_DIRECCIONES INCREMENT BY 1 START WITH 1 MAXVALUE 99999 MINVALUE 0;

--CREACION DE TABLA TELEFONOS
CREATE TABLE TELEFONOS(
    ID_TELEFONO  NUMBER DEFAULT SEQ_TELEFONOS.NEXTVAL CONSTRAINT ID_TELEFONO_PK PRIMARY KEY,
    TELEFONO VARCHAR2(255),
    ID_ESTADO NUMBER,
    ID_USUARIO NUMBER,
    CONSTRAINT ID_ESTADO_TELEFONO_FK FOREIGN KEY (ID_ESTADO) REFERENCES ESTADOS(ID_ESTADO),
    CONSTRAINT ID_USUARIO_TELEFONO_FK FOREIGN KEY (ID_USUARIO) REFERENCES USUARIOS(ID_USUARIO)
)TABLESPACE BD_LEGADO;
CREATE SEQUENCE SEQ_TELEFONOS INCREMENT BY 1 START WITH 1 MAXVALUE 99999 MINVALUE 0;
--CREACION DE TABLA USUARIOS PARA AUDITORIA

CREATE TABLE AUDITORIA_USUARIOS (
    ID_AUDITORIA NUMBER CONSTRAINT ID_USUARIO_AUDITORIA_PK PRIMARY KEY,
    ID_USUARIO NUMBER NOT NULL,
    NOMBRE_ANTERIOR VARCHAR2(100),
    NOMBRE_NUEVO VARCHAR2(100),
    APELLIDO1_ANTERIOR VARCHAR2(100),
    APELLIDO1_NUEVO VARCHAR2(100),
    APELLIDO2_ANTERIOR VARCHAR2(100),
    APELLIDO2_NUEVO VARCHAR2(100),
    EMAIL_ANTERIOR VARCHAR2(100),
    EMAIL_NUEVO VARCHAR2(100),
    ID_ESTADO_ANTERIOR NUMBER,
    ID_ESTADO_NUEVO NUMBER,
    USERNAME_ANTERIOR VARCHAR2(50),
    USERNAME_NUEVO VARCHAR2(50),
    CONTRASENA_ANTERIOR VARCHAR2(100),
    CONTRASENA_NUEVO VARCHAR2(100),
    ID_ROL_ANTERIOR NUMBER,
    ID_ROL_NUEVO NUMBER,
    TIPO_OPERACION VARCHAR2(10) NOT NULL, 
    FECHA_OPERACION DATE DEFAULT SYSDATE NOT NULL,
    USUARIO_OPERACION VARCHAR2(100) NOT NULL
) TABLESPACE BD_LEGADO;
CREATE SEQUENCE SEQ_USUARIOS_AUDITORIA START WITH 1 INCREMENT BY 1;

CREATE TABLE AUDITORIA_INVENTARIO (
    ID_AUDITORIA NUMBER CONSTRAINT ID_INVENTARIO_AUDITORIA_PK PRIMARY KEY,
    ID_INVENTARIO NUMBER NOT NULL,
    NOMBRE_ANTERIOR VARCHAR2(100),
    NOMBRE_NUEVO VARCHAR2(100),
    CANTIDAD_ANTERIOR NUMBER,
    CANTIDAD_NUEVA NUMBER, 
    ID_ESTADO_ANTERIOR NUMBER,
    ID_ESTADO_NUEVO NUMBER,
    TIPO_OPERACION VARCHAR2(10) NOT NULL, 
    FECHA_OPERACION DATE DEFAULT SYSDATE NOT NULL,
    USUARIO_OPERACION VARCHAR2(100) NOT NULL
) TABLESPACE BD_LEGADO;
CREATE SEQUENCE SEQ_INVENTARIOS_AUDITORIA START WITH 1 INCREMENT BY 1;

CREATE TABLE AUDITORIA_PRODUCTOS (
    ID_AUDITORIA NUMBER PRIMARY KEY,
    ID_PRODUCTO NUMBER,
    
    NOMBRE_ANTERIOR VARCHAR2(100),
    NOMBRE_NUEVO VARCHAR2(100),
    
    PRECIO_ANTERIOR NUMBER(10,2),
    PRECIO_NUEVO NUMBER(10,2),
    
    ID_CATEGORIA_ANTERIOR NUMBER,
    ID_CATEGORIA_NUEVA NUMBER,
    
    ID_ESTADO_ANTERIOR NUMBER,
    ID_ESTADO_NUEVO NUMBER,
    
    DESCRIPCION_ANTERIOR VARCHAR2(100),
    DESCRIPCION_NUEVA VARCHAR2(100),
    
    IMAGEN_ANTERIOR VARCHAR2(400),
    IMAGEN_NUEVA VARCHAR2(400),
    
    TIPO_OPERACION VARCHAR2(10),
    USUARIO_OPERACION VARCHAR2(30),
    FECHA_OPERACION DATE default sysdate
) TABLESPACE BD_LEGADO;
CREATE SEQUENCE SEQ_PRODUCTOS_AUDITORIA START WITH 1 INCREMENT BY 1;

CREATE TABLE AUDITORIA_ERRORES_LEGADO (
ID NUMBER DEFAULT SEQ_AUDITORIA_ERRORES.NEXTVAL PRIMARY KEY,
VERROR VARCHAR2(2000),
ORIGEN VARCHAR2(400),
VUSER VARCHAR2(100),
FECHA DATE
) TABLESPACE BD_LEGADO;

CREATE SEQUENCE SEQ_AUDITORIA_ERRORES INCREMENT BY 1 START WITH 1
MAXVALUE 99999 MINVALUE 0;


--CREACION DE VISTAS

--VISTA DE USUARIOS LOGIN
CREATE OR REPLACE VIEW V_USUARIOS_ROLES AS
SELECT 
    U.ID_USUARIO,
    U.NOMBRE,
    U.APELLIDO1,
    U.APELLIDO2,
    U.EMAIL,
    U.ID_ESTADO,
    U.USERNAME,
    U.CONTRASENA,
    U.ID_ROL,
    C.ID_CARRITO,
    R.DESCRIPCION AS ROL_DESCRIPCION
FROM 
    USUARIOS U
JOIN 
    ROLES R ON U.ID_ROL = R.ID_ROL
JOIN 
    CARRITO C ON C.ID_USUARIO = U.ID_USUARIO;

--CREACION DE TRIGGERS

--TRIGGER QUE REGISTRA EL MOVIMIENTO REALIZADO EN LA TABLA USUARIOS PARA ALMACENARLO EN LA TABLA AUDITORIA

create or replace TRIGGER TG_SECUENCIA_PEDIDOS
    BEFORE INSERT ON PEDIDOS
    FOR EACH ROW
    BEGIN
        SELECT SEQ_PEDIDOS.NEXTVAL INTO :NEW.ID_PEDIDO FROM DUAL;
END ;

CREATE OR REPLACE TRIGGER TRG_USUARIOS_AUDITORIA
AFTER INSERT OR UPDATE OR DELETE ON USUARIOS
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        -- Registrar una inserci칩n
        INSERT INTO AUDITORIA_USUARIOS (
            ID_AUDITORIA, ID_USUARIO, NOMBRE_NUEVO, APELLIDO1_NUEVO, APELLIDO2_NUEVO,
            EMAIL_NUEVO, ID_ESTADO_NUEVO, USERNAME_NUEVO, CONTRASENA_NUEVO, ID_ROL_NUEVO,
            TIPO_OPERACION, USUARIO_OPERACION
        ) VALUES (
            seq_auditoria_usuarios.NEXTVAL, :NEW.ID_USUARIO, :NEW.NOMBRE, :NEW.APELLIDO1, :NEW.APELLIDO2,
            :NEW.EMAIL, :NEW.ID_ESTADO, :NEW.USERNAME, :NEW.CONTRASENA, :NEW.ID_ROL,
            'INSERT', USER
        );
    ELSIF UPDATING THEN
        -- Registrar una actualizaci칩n
        INSERT INTO AUDITORIA_USUARIOS (
            ID_AUDITORIA, ID_USUARIO, NOMBRE_ANTERIOR, NOMBRE_NUEVO, APELLIDO1_ANTERIOR, APELLIDO1_NUEVO,
            APELLIDO2_ANTERIOR, APELLIDO2_NUEVO, EMAIL_ANTERIOR, EMAIL_NUEVO, ID_ESTADO_ANTERIOR, ID_ESTADO_NUEVO,
            USERNAME_ANTERIOR, USERNAME_NUEVO, CONTRASENA_ANTERIOR, CONTRASENA_NUEVO, ID_ROL_ANTERIOR, ID_ROL_NUEVO,
            TIPO_OPERACION, USUARIO_OPERACION
        ) VALUES (
            seq_auditoria_usuarios.NEXTVAL, :OLD.ID_USUARIO, :OLD.NOMBRE, :NEW.NOMBRE, :OLD.APELLIDO1, :NEW.APELLIDO1,
            :OLD.APELLIDO2, :NEW.APELLIDO2, :OLD.EMAIL, :NEW.EMAIL, :OLD.ID_ESTADO, :NEW.ID_ESTADO,
            :OLD.USERNAME, :NEW.USERNAME, :OLD.CONTRASENA, :NEW.CONTRASENA, :OLD.ID_ROL, :NEW.ID_ROL,
            'UPDATE', USER
        );
    ELSIF DELETING THEN
        -- Registrar una eliminaci칩n
        INSERT INTO AUDITORIA_USUARIOS (
            ID_AUDITORIA, ID_USUARIO, NOMBRE_ANTERIOR, APELLIDO1_ANTERIOR, APELLIDO2_ANTERIOR,
            EMAIL_ANTERIOR, ID_ESTADO_ANTERIOR, USERNAME_ANTERIOR, CONTRASENA_ANTERIOR, ID_ROL_ANTERIOR,
            TIPO_OPERACION, USUARIO_OPERACION
        ) VALUES (
            seq_auditoria_usuarios.NEXTVAL, :OLD.ID_USUARIO, :OLD.NOMBRE, :OLD.APELLIDO1, :OLD.APELLIDO2,
            :OLD.EMAIL, :OLD.ID_ESTADO, :OLD.USERNAME, :OLD.CONTRASENA, :OLD.ID_ROL,
            'DELETE', USER
        );
    END IF;
END;

--TRIGGER QUE REGISTRA EL MOVIMIENTO REALIZADO EN LA TABLA PRODUCTOS PARA ALMACENARLO EN LA TABLA AUDITORIA

CREATE OR REPLACE TRIGGER TRG_AUDITORIA_PRODUCTOS
AFTER INSERT OR UPDATE OR DELETE ON PRODUCTOS
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO AUDITORIA_PRODUCTOS (
            ID_AUDITORIA, ID_PRODUCTO, NOMBRE_NUEVO, PRECIO_NUEVO, 
            ID_CATEGORIA_NUEVA, ID_ESTADO_NUEVO, DESCRIPCION_NUEVA, IMAGEN_NUEVA,
            TIPO_OPERACION, USUARIO_OPERACION
        ) VALUES (
            SEQ_AUDITORIA_PRODUCTOS.NEXTVAL, :NEW.ID_PRODUCTO, :NEW.NOMBRE, :NEW.PRECIO, 
            :NEW.ID_CATEGORIA, :NEW.ID_ESTADO, :NEW.DESCRIPCION, :NEW.IMAGEN,
            'INSERT', USER
        );

    ELSIF UPDATING THEN
        INSERT INTO AUDITORIA_PRODUCTOS (
            ID_AUDITORIA, ID_PRODUCTO, NOMBRE_ANTERIOR, NOMBRE_NUEVO, 
            PRECIO_ANTERIOR, PRECIO_NUEVO, 
            ID_CATEGORIA_ANTERIOR, ID_CATEGORIA_NUEVA, 
            ID_ESTADO_ANTERIOR, ID_ESTADO_NUEVO, 
            DESCRIPCION_ANTERIOR, DESCRIPCION_NUEVA, 
            IMAGEN_ANTERIOR, IMAGEN_NUEVA, 
            TIPO_OPERACION, USUARIO_OPERACION
        ) VALUES (
            SEQ_AUDITORIA_PRODUCTOS.NEXTVAL, :OLD.ID_PRODUCTO, :OLD.NOMBRE, :NEW.NOMBRE, 
            :OLD.PRECIO, :NEW.PRECIO, 
            :OLD.ID_CATEGORIA, :NEW.ID_CATEGORIA, 
            :OLD.ID_ESTADO, :NEW.ID_ESTADO, 
            :OLD.DESCRIPCION, :NEW.DESCRIPCION, 
            :OLD.IMAGEN, :NEW.IMAGEN, 
            'UPDATE', USER
        );

    ELSIF DELETING THEN
        INSERT INTO AUDITORIA_PRODUCTOS (
            ID_AUDITORIA, ID_PRODUCTO, NOMBRE_ANTERIOR, PRECIO_ANTERIOR, 
            ID_CATEGORIA_ANTERIOR, ID_ESTADO_ANTERIOR, DESCRIPCION_ANTERIOR, IMAGEN_ANTERIOR,
            TIPO_OPERACION, USUARIO_OPERACION
        ) VALUES (
            SEQ_AUDITORIA_PRODUCTOS.NEXTVAL, :OLD.ID_PRODUCTO, :OLD.NOMBRE, :OLD.PRECIO, 
            :OLD.ID_CATEGORIA, :OLD.ID_ESTADO, :OLD.DESCRIPCION, :OLD.IMAGEN,
            'DELETE', USER
        );
    END IF;
END TRG_AUDITORIA_PRODUCTOS;


--TRIGGER QUE REGISTRA EL MOVIMIENTO REALIZADO EN LA TABLA INVENTARIOS PARA ALMACENARLO EN LA TABLA AUDITORIA

CREATE OR REPLACE TRIGGER TRG_INVENTARIO_AUDITORIA
AFTER INSERT OR UPDATE OR DELETE ON INVENTARIO
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO AUDITORIA_INVENTARIO (
            ID_AUDITORIA, ID_INVENTARIO, NOMBRE_NUEVO, CANTIDAD_NUEVA, ID_ESTADO_NUEVO,
            TIPO_OPERACION, USUARIO_OPERACION
        ) VALUES (
            SEQ_AUDITORIA_INVENTARIO.NEXTVAL, :NEW.ID_INVENTARIO, :NEW.NOMBRE, :NEW.CANTIDAD, :NEW.ID_ESTADO,
            'INSERT', USER
        );
    
    ELSIF UPDATING THEN
        INSERT INTO AUDITORIA_INVENTARIO (
            ID_AUDITORIA, ID_INVENTARIO, NOMBRE_ANTERIOR, NOMBRE_NUEVO, CANTIDAD_ANTERIOR, CANTIDAD_NUEVA, 
            ID_ESTADO_ANTERIOR, ID_ESTADO_NUEVO, TIPO_OPERACION, USUARIO_OPERACION
        ) VALUES (
            SEQ_AUDITORIA_INVENTARIO.NEXTVAL, :OLD.ID_INVENTARIO, :OLD.NOMBRE, :NEW.NOMBRE, :OLD.CANTIDAD, :NEW.CANTIDAD,
            :OLD.ID_ESTADO, :NEW.ID_ESTADO, 'UPDATE', USER
        );
    
    ELSIF DELETING THEN
        INSERT INTO AUDITORIA_INVENTARIO (
            ID_AUDITORIA, ID_INVENTARIO, NOMBRE_ANTERIOR, CANTIDAD_ANTERIOR, ID_ESTADO_ANTERIOR, 
            TIPO_OPERACION, USUARIO_OPERACION
        ) VALUES (
            SEQ_AUDITORIA_INVENTARIO.NEXTVAL, :OLD.ID_INVENTARIO, :OLD.NOMBRE, :OLD.CANTIDAD, :OLD.ID_ESTADO,
            'DELETE', USER
        );
    END IF;
END;

--Funciones
-- 1. Funcion para calcular el total de un carrito de compras
CREATE OR REPLACE FUNCTION CALCULAR_TOTAL_CARRITO(p_id_carrito NUMBER) RETURN NUMBER IS
    v_total NUMBER := 0;
BEGIN
    SELECT COALESCE(SUM(ac.CANTIDAD * p.PRECIO), 0)
    INTO v_total
    FROM ARTICULOS_CARRITO ac
    JOIN PRODUCTOS p ON ac.ID_PRODUCTO = p.ID_PRODUCTO
    WHERE ac.ID_CARRITO = p_id_carrito;
    
    RETURN v_total;
END;

-------------------------------------------------------------------------------------------------------------------
--PACKAGE CON SP Y FUNCIONES
CREATE OR REPLACE PACKAGE PKG_LEGADO AS

    -- Procedimientos de gesti칩n de pedidos
    PROCEDURE SP_ACTUALIZAR_ESTADO_PEDIDO(
        P_ID_PEDIDO    NUMBER,
        P_ID_ESTADO    NUMBER
    );

    PROCEDURE SP_OBTENER_PEDIDOS(
        P_CURSOR OUT SYS_REFCURSOR
    );

    -- Procedimientos de gesti칩n de inventario
    PROCEDURE SP_OBTENER_INVENTARIO(
        P_CURSOR OUT SYS_REFCURSOR
    );

    PROCEDURE SP_ACTUALIZAR_ESTADO_INVENTARIO(
        P_ID_INVENTARIO IN NUMBER,
        P_ID_ESTADO     IN NUMBER
    );

    PROCEDURE SP_INSERTAR_PRODUCTO_INVENTARIO(
        v_nombre    IN VARCHAR2,
        v_cantidad  IN NUMBER,
        v_estado    IN NUMBER
    );

    PROCEDURE SP_ACTUALIZAR_CANTIDAD_INVENTARIO(
        P_ID_INVENTARIO IN NUMBER,
        P_CANTIDAD      IN NUMBER
    );




--CARRITO
    PROCEDURE SP_GET_CARRITO_USUARIO (DATOS OUT SYS_REFCURSOR, VID IN NUMBER);
    PROCEDURE SP_AGREGAR_ARTICULO_CARRITO (P_CARRITO IN NUMBER, P_PRODUCTO IN NUMBER, P_CANTIDAD IN NUMBER);
    PROCEDURE SP_ELIMINAR_ARTICULO_CARRITO( P_ID IN NUMBER);
    PROCEDURE SP_EDITAR_ARTICULO_CARRITO( P_ID_ARTICULO IN NUMBER, P_CANTIDAD IN NUMBER);
    FUNCTION FN_CONTAR_ARTICULOS_CARRITO (P_CARRITO IN NUMBER) RETURN NUMBER;

    --CHECKOUT
    PROCEDURE SP_EJECUTAR_CHECKOUT (P_CARRITO IN NUMBER, P_ID_USUARIO IN NUMBER, P_METODO_PAGO IN VARCHAR2);
    FUNCTION FN_OBTENER_SUBTOTAL_CARRITO (P_CARRITO IN NUMBER) RETURN NUMBER;


  --TELEFONOS
  PROCEDURE SP_GET_TELEFONOS_USUARIO (P_DATOS OUT SYS_REFCURSOR, P_ID IN NUMBER);
  PROCEDURE SP_CRUD_TELEFONO (P_TELEFONO IN NUMBER, P_ID IN NUMBER, P_ACCION IN NUMBER, P_ID_TELEFONO IN NUMBER);
  

--DIRECCIONES
  PROCEDURE SP_GET_DIRECCIONES_USUARIO (P_DATOS OUT SYS_REFCURSOR, P_ID IN NUMBER);
  PROCEDURE SP_GET_PROVINCIAS (P_DATOS OUT SYS_REFCURSOR);
  PROCEDURE SP_GET_CANTONES (P_DATOS OUT SYS_REFCURSOR, P_PROVINCIA IN NUMBER);
  PROCEDURE SP_GET_DISTRITOS (P_DATOS OUT SYS_REFCURSOR, P_CANTON IN NUMBER);
  PROCEDURE SP_AGREGAR_DIRECCION (P_ID IN NUMBER, P_DIRECCION IN VARCHAR2, P_DISTRITO IN NUMBER);
  PROCEDURE SP_EDITAR_DIRECCION (P_ID IN NUMBER, P_DIRECCION IN VARCHAR2, P_DISTRITO IN NUMBER);
  PROCEDURE SP_GET_DIRECCION (P_DATOS OUT SYS_REFCURSOR, P_ID IN NUMBER);
  PROCEDURE SP_ELIMINAR_DIRECCION (P_ID IN NUMBER);



 --CRUD USUARIOS Y LOGIN
 FUNCTION FN_RECUPERAR_USUARIO (P_EMAIL IN VARCHAR2, P_NOMBRE IN VARCHAR2) RETURN VARCHAR2;
 PROCEDURE SP_CAMBIAR_CONTRASENA (
    P_USERNAME IN VARCHAR2,
    P_NUEVA_CONTRASENA IN VARCHAR2
);

 PROCEDURE SP_LISTAR_USUARIOS (
    P_CURSOR OUT SYS_REFCURSOR
);

PROCEDURE SP_AGREGAR_USUARIO(
    P_NOMBRE IN VARCHAR2,
    P_EMAIL IN VARCHAR2,
    P_ESTADO IN NUMBER,
    P_APELLIDO1 IN VARCHAR2,
    P_APELLIDO2 IN VARCHAR2,
    P_USERNAME IN VARCHAR2,
    P_CONTRASENA IN VARCHAR2,
    P_ROL IN NUMBER,
    P_ID_USUARIO OUT NUMBER
);

PROCEDURE SP_EDITAR_USUARIO(
    P_ID_USUARIO   IN NUMBER,
    P_NOMBRE       IN VARCHAR2,
    P_APELLIDO1    IN VARCHAR2,
    P_APELLIDO2    IN VARCHAR2,
    P_EMAIL        IN VARCHAR2,
    P_ESTADO       IN NUMBER,
    P_USERNAME     IN VARCHAR2,
    P_CONTRASENA   IN VARCHAR2,
    P_ROL          IN NUMBER
);

PROCEDURE SP_CAMBIAR_ESTADO_USUARIO (
    P_ID_USUARIO IN NUMBER,
    P_NUEVO_ESTADO IN NUMBER
);

PROCEDURE SP_VERIFICAR_USUARIO(
    p_username IN VARCHAR2,
    p_id_usuario OUT NUMBER,
    p_id_rol OUT NUMBER,
    p_rol_descripcion OUT VARCHAR2,
    p_email OUT VARCHAR2,
    p_contrasena OUT VARCHAR2,
    p_nombre OUT VARCHAR2,
    p_id_carrito OUT NUMBER,
    p_estado_usuario   OUT NUMBER
);

PROCEDURE SP_OBTENER_ROLES (
    P_CURSOR OUT SYS_REFCURSOR
);

PROCEDURE SP_CREAR_CARRITO(
    P_ID_USUARIO IN NUMBER
);

  --CONSULTAS
  PROCEDURE SP_AGREGAR_CONSULTA(P_ID IN NUMBER, P_TIPO IN VARCHAR2, P_MENSAJE VARCHAR2);
  PROCEDURE SP_GET_CONSULTA_USUARIO (P_CURSOR OUT SYS_REFCURSOR, P_ID IN NUMBER);
  PROCEDURE SP_GET_CONSULTAS (P_CURSOR OUT SYS_REFCURSOR);
  PROCEDURE SP_CRUD_CONSULTAS (P_ACCION IN NUMBER, P_ID IN NUMBER);
  
  
  -- MI PERFIL
  PROCEDURE SP_GET_PEDIDOS_USUARIO(P_DATOS OUT SYS_REFCURSOR, P_ID IN NUMBER);
  FUNCTION FN_CONTAR_PEDIDOS(P_ID IN NUMBER) RETURN NUMBER;
  PROCEDURE SP_GET_PEDIDOS_DETALLES (P_DATOS OUT SYS_REFCURSOR, P_ID IN NUMBER);
  PROCEDURE SP_GET_INFORMACION_USUARIO (P_DATOS OUT SYS_REFCURSOR, P_ID IN NUMBER);
  PROCEDURE SP_ACTUALIZAR_INFORMACION_PERFIL ( P_ID IN NUMBER, P_NOMBRE IN VARCHAR2, P_APELLIDO1 IN VARCHAR2, P_APELLIDO2 IN VARCHAR2, P_EMAIL IN VARCHAR2);
  
  
  -- CRUD PRODUCTOS
  FUNCTION FN_CONTAR_PRODUCTOS_REGISTRADOS RETURN NUMBER;
  PROCEDURE SP_AGREGAR_PRODUCTO( P_PRECIO IN NUMBER, P_CATEGORIA IN NUMBER, P_DESCRIPCION IN VARCHAR2, P_NOMBRE IN VARCHAR2, P_IMAGEN IN VARCHAR2);
  PROCEDURE SP_EDITAR_PRODUCTO( P_PRECIO IN NUMBER, P_CATEGORIA  IN NUMBER, P_DESCRIPCION IN VARCHAR2, P_NOMBRE     IN VARCHAR2, P_IMAGEN     IN VARCHAR2, P_ESTADO     IN NUMBER,  P_ID IN NUMBER);
  PROCEDURE SP_ELIMINAR_ACTIVAR_PRODUCTO(P_ID IN NUMBER, P_ESTADO IN NUMBER);
  PROCEDURE SP_GET_PRODUCTOS(P_DATOS OUT SYS_REFCURSOR);
  PROCEDURE SP_GET_CATEGORIAS(P_DATOS OUT SYS_REFCURSOR);
  PROCEDURE SP_GET_PRODUCTOS_ACTIVOS (P_DATOS OUT SYS_REFCURSOR);
  PROCEDURE SP_OBTENER_PRODUCTO_POR_ID (P_DATOS OUT SYS_REFCURSOR, P_ID IN NUMBER);
  PROCEDURE SP_CRUD_CATEGORIAS (DESCRIPCION IN VARCHAR2, P_ID IN NUMBER, P_ACCION IN NUMBER);
  PROCEDURE SP_GET_PRODUCTOS_CATEGORIAS (P_DATOS OUT SYS_REFCURSOR, P_CATEGORIA IN NUMBER);
  
END PKG_LEGADO;

CREATE OR REPLACE PACKAGE BODY PKG_LEGADO AS

PROCEDURE SP_ACTUALIZAR_ESTADO_PEDIDO(
    P_ID_PEDIDO    NUMBER,
    P_ID_ESTADO    NUMBER
) IS
    V_ERROR VARCHAR2(4000);
BEGIN
    BEGIN
        -- Actualizaci칩n del estado del pedido
        UPDATE PEDIDOS
        SET ID_ESTADO = P_ID_ESTADO
        WHERE ID_PEDIDO = P_ID_PEDIDO;
        
        -- Si se ejecuta correctamente, confirmar la transacci칩n
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            V_ERROR := SQLERRM;
            -- Registrar el error en la tabla de auditor칤a
            BEGIN
                INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
                VALUES (V_ERROR, 'SP_ACTUALIZAR_ESTADO_PEDIDO', USER, SYSDATE);
                COMMIT;
                DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITADO: ' || V_ERROR);
            EXCEPTION
                WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITOR칈A FALL칍: ' || SQLERRM);
            END;

    END;
END SP_ACTUALIZAR_ESTADO_PEDIDO;

PROCEDURE SP_OBTENER_PEDIDOS(P_CURSOR OUT SYS_REFCURSOR) AS
    V_ERROR VARCHAR2(4000);
BEGIN
    BEGIN
        -- Abrir el cursor para obtener los pedidos
        OPEN P_CURSOR FOR
            SELECT 
                P.ID_PEDIDO,
                P.FECHA,
                U.NOMBRE || ' ' || U.APELLIDO1 || ' ' || U.APELLIDO2 AS NOMBRE_CLIENTE,
                E.DESCRIPCION AS ESTADO,
                P.SUBTOTAL,
                P.TOTAL
            FROM PEDIDOS P
            JOIN ESTADOS E ON P.ID_ESTADO = E.ID_ESTADO
            JOIN USUARIOS U ON P.ID_USUARIO = U.ID_USUARIO
            WHERE P.ID_ESTADO IN (1, 3, 4, 5, 7, 8)
            ORDER BY P.ID_ESTADO;
        
    EXCEPTION
        WHEN OTHERS THEN
            V_ERROR := SQLERRM;
            -- Registrar el error en la tabla de auditor칤a
            BEGIN
                INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
                VALUES (V_ERROR, 'SP_OBTENER_PEDIDOS', USER, SYSDATE);
                COMMIT;
                DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITADO: ' || V_ERROR);
            EXCEPTION
                WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITOR칈A FALL칍: ' || SQLERRM);
            END;
    END;
END SP_OBTENER_PEDIDOS;

PROCEDURE SP_OBTENER_INVENTARIO(P_CURSOR OUT SYS_REFCURSOR) IS
    V_ERROR VARCHAR2(4000);
BEGIN
    BEGIN
        -- Abrir el cursor para obtener el inventario
        OPEN P_CURSOR FOR
            SELECT 
                I.ID_INVENTARIO,
                I.NOMBRE,
                I.CANTIDAD,
                E.DESCRIPCION AS ESTADO
            FROM INVENTARIO I
            JOIN ESTADOS E ON I.ID_ESTADO = E.ID_ESTADO
            WHERE I.ID_ESTADO IN (1, 2)
            ORDER BY I.CANTIDAD;
        
    EXCEPTION
        WHEN OTHERS THEN
            V_ERROR := SQLERRM;
            -- Registrar el error en la tabla de auditor칤a
            BEGIN
                INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
                VALUES (V_ERROR, 'SP_OBTENER_INVENTARIO', USER, SYSDATE);
                COMMIT;
                DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITADO: ' || V_ERROR);
            EXCEPTION
                WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITOR칈A FALL칍: ' || SQLERRM);
            END;
            -- Re-levantar el error original
    END;
END SP_OBTENER_INVENTARIO;


    -- NUEVO: Actualizar estado del inventario
PROCEDURE SP_ACTUALIZAR_ESTADO_INVENTARIO(
    P_ID_INVENTARIO NUMBER,
    P_ID_ESTADO     NUMBER
) IS
    V_ERROR VARCHAR2(4000);
BEGIN
    BEGIN
        UPDATE INVENTARIO
        SET ID_ESTADO = P_ID_ESTADO
        WHERE ID_INVENTARIO = P_ID_INVENTARIO;

        COMMIT;
        
    EXCEPTION
        WHEN OTHERS THEN
            V_ERROR := SQLERRM;
            BEGIN
                INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
                VALUES (V_ERROR, 'SP_ACTUALIZAR_ESTADO_INVENTARIO', USER, SYSDATE);
                COMMIT;
                DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITADO: ' || V_ERROR);
            EXCEPTION
                WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITOR칈A FALL칍: ' || SQLERRM);
            END;
    END;
END SP_ACTUALIZAR_ESTADO_INVENTARIO;

    
PROCEDURE SP_INSERTAR_PRODUCTO_INVENTARIO (
    v_nombre   IN VARCHAR2,
    v_cantidad IN NUMBER,
    v_estado   IN NUMBER
) IS
    V_ERROR VARCHAR2(4000);
BEGIN
    BEGIN
        INSERT INTO INVENTARIO (
            ID_INVENTARIO, NOMBRE, CANTIDAD, ID_ESTADO
        ) VALUES (
            SEQ_INVENTARIO.NEXTVAL, v_nombre, v_cantidad, v_estado
        );

        COMMIT;

    EXCEPTION
        WHEN OTHERS THEN
            V_ERROR := SQLERRM;
            BEGIN
                INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
                VALUES (V_ERROR, 'SP_INSERTAR_PRODUCTO_INVENTARIO', USER, SYSDATE);
                COMMIT;
                DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITADO: ' || V_ERROR);
            EXCEPTION
                WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITOR칈A FALL칍: ' || SQLERRM);
            END;
    END;
END SP_INSERTAR_PRODUCTO_INVENTARIO;



    -- NUEVO: Actualizar cantidad del producto en el inventario
PROCEDURE SP_ACTUALIZAR_CANTIDAD_INVENTARIO(
    P_ID_INVENTARIO   IN NUMBER,
    P_CANTIDAD        IN NUMBER
) IS
    V_ERROR VARCHAR2(4000);
BEGIN
    BEGIN
        UPDATE INVENTARIO
        SET CANTIDAD = P_CANTIDAD
        WHERE ID_INVENTARIO = P_ID_INVENTARIO;

        COMMIT;

    EXCEPTION
        WHEN OTHERS THEN
            V_ERROR := SQLERRM;
            BEGIN
                INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
                VALUES (V_ERROR, 'SP_ACTUALIZAR_CANTIDAD_INVENTARIO', USER, SYSDATE);
                COMMIT;
                DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITADO: ' || V_ERROR);
            EXCEPTION
                WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITOR칈A FALL칍: ' || SQLERRM);
            END;
    END;
END SP_ACTUALIZAR_CANTIDAD_INVENTARIO;


--CARRITO
FUNCTION FN_CONTAR_ARTICULOS_CARRITO (P_CARRITO IN NUMBER) 
RETURN NUMBER 
AS
    V_CONTAR NUMBER;
    VMESS VARCHAR2(2000);
BEGIN
    SELECT COUNT(*) 
    INTO V_CONTAR 
    FROM ARTICULOS_CARRITO 
    WHERE ID_CARRITO = P_CARRITO;

    RETURN V_CONTAR;

EXCEPTION
    WHEN OTHERS THEN
        VMESS := SQLERRM;

        BEGIN
            INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
            VALUES (VMESS, 'FN_CONTAR_ARTICULOS_CARRITO', USER, SYSDATE);
            COMMIT;
            DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITADO: ' || VMESS);
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITOR칈A FALL칍: ' || SQLERRM);
        END;
        
        RAISE_APPLICATION_ERROR(-20001, 'Error al contar art칤culos del carrito: ' || VMESS);
END FN_CONTAR_ARTICULOS_CARRITO;

PROCEDURE SP_GET_CARRITO_USUARIO (
    DATOS OUT SYS_REFCURSOR,
    VID   IN  NUMBER
) AS
    VCOD  NUMBER;
    VMESS VARCHAR2(600);
BEGIN
    BEGIN
        OPEN DATOS FOR
            SELECT 
                I.ID_PRODUCTO,
                I.ID_ARTICULO,
                I.CANTIDAD,
                P.NOMBRE,
                P.PRECIO,
                (I.CANTIDAD * P.PRECIO) AS SUBTOTAL
            FROM ARTICULOS_CARRITO I
            INNER JOIN PRODUCTOS P ON I.ID_PRODUCTO = P.ID_PRODUCTO
            WHERE I.ID_CARRITO = VID;

    EXCEPTION
        WHEN OTHERS THEN
            VCOD := SQLCODE;
            VMESS := SQLERRM;

        
            BEGIN
                INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
                VALUES (VMESS, 'SP_GET_CARRITO_USUARIO', USER, SYSDATE);
                COMMIT;
                DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITADO: ' || VMESS);
            EXCEPTION
                WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITOR칈A FALL칍: ' || SQLERRM);
            END;

            RAISE_APPLICATION_ERROR(-20002, 'Error al obtener el carrito del usuario: ' || VMESS);
    END;
END SP_GET_CARRITO_USUARIO;

PROCEDURE SP_AGREGAR_ARTICULO_CARRITO(
    P_CARRITO  IN NUMBER,
    P_PRODUCTO IN NUMBER,
    P_CANTIDAD IN NUMBER
) AS
    V_ID_ARTICULO NUMBER;
    VCOD NUMBER;
    VMESS VARCHAR2(600);
    VSQL VARCHAR2(1000);
    V_CONTAR NUMBER := 0;
    V_CANTIDAD NUMBER := 0;
BEGIN
    DBMS_OUTPUT.PUT_LINE('--- Iniciando SP_AGREGAR_ARTICULO_CARRITO ---');

    -- Verificar si ya existe el producto en el carrito
    SELECT COUNT(*) INTO V_CONTAR
    FROM ARTICULOS_CARRITO
    WHERE ID_PRODUCTO = P_PRODUCTO AND ID_CARRITO = P_CARRITO;

    DBMS_OUTPUT.PUT_LINE('Productos encontrados en carrito: ' || V_CONTAR);

    IF V_CONTAR = 0 THEN
        DBMS_OUTPUT.PUT_LINE('No existe, insertando nuevo art칤culo');

        SELECT SEQ_ARTICULO_CARRITO.NEXTVAL INTO V_ID_ARTICULO FROM DUAL;

        VSQL := '
            INSERT INTO ARTICULOS_CARRITO (ID_ARTICULO, ID_CARRITO, ID_PRODUCTO, CANTIDAD)
            VALUES (:idArticulo, :idCarrito, :idProducto, :cantidad)
        ';
        EXECUTE IMMEDIATE VSQL USING V_ID_ARTICULO, P_CARRITO, P_PRODUCTO, P_CANTIDAD;

        DBMS_OUTPUT.PUT_LINE('Insert exitoso, ID_ARTICULO = ' || V_ID_ARTICULO);

    ELSE
        -- Obtener cantidad actual
        SELECT CANTIDAD INTO V_CANTIDAD
        FROM ARTICULOS_CARRITO
        WHERE ID_PRODUCTO = P_PRODUCTO AND ID_CARRITO = P_CARRITO;

        DBMS_OUTPUT.PUT_LINE('Ya existe, cantidad actual = ' || V_CANTIDAD);

        -- Actualizar la cantidad
        VSQL := '
            UPDATE ARTICULOS_CARRITO
            SET CANTIDAD = :nuevaCantidad
            WHERE ID_PRODUCTO = :idProducto AND ID_CARRITO = :idCarrito
        ';
        EXECUTE IMMEDIATE VSQL USING V_CANTIDAD + P_CANTIDAD, P_PRODUCTO, P_CARRITO;

        DBMS_OUTPUT.PUT_LINE('Cantidad actualizada a ' || (V_CANTIDAD + P_CANTIDAD));
    END IF;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('--- Fin SP_AGREGAR_ARTICULO_CARRITO ---');

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        VCOD := SQLCODE;
        VMESS := SQLERRM;

        -- Auditar el error
        BEGIN
            INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
            VALUES (VMESS, 'SP_AGREGAR_ARTICULO_CARRITO', USER, SYSDATE);
            COMMIT;
            DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITADO: ' || VMESS);
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITOR칈A FALL칍: ' || SQLERRM);
        END;

END SP_AGREGAR_ARTICULO_CARRITO;

PROCEDURE SP_ELIMINAR_ARTICULO_CARRITO(
    P_ID IN NUMBER
) AS
    VCOD NUMBER;
    VMESS VARCHAR2(600);
    VSQL VARCHAR2(400);
BEGIN

    VSQL := ' DELETE FROM ARTICULOS_CARRITO WHERE ID_ARTICULO = :id';
    EXECUTE IMMEDIATE VSQL USING P_ID;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        VCOD := SQLCODE;
        VMESS := SQLERRM;

      
        BEGIN
            INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
            VALUES (VMESS, 'SP_ELIMINAR_ARTICULO_CARRITO', USER, SYSDATE);
            COMMIT;
            DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITADO: ' || VMESS);
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITOR칈A FALL칍: ' || SQLERRM);
        END;

        DBMS_OUTPUT.PUT_LINE(VCOD || ' ' || VMESS);
END SP_ELIMINAR_ARTICULO_CARRITO;

PROCEDURE SP_EDITAR_ARTICULO_CARRITO (
    P_ID_ARTICULO IN NUMBER, 
    P_CANTIDAD IN NUMBER
) AS
    VSQL VARCHAR2(400);
    VCOD NUMBER;
    VMESS VARCHAR2(600);
    VPRECIO NUMBER;
BEGIN

    SELECT P.PRECIO INTO VPRECIO
    FROM ARTICULOS_CARRITO C
    INNER JOIN PRODUCTOS P ON C.ID_PRODUCTO = P.ID_PRODUCTO
    WHERE C.ID_ARTICULO = P_ID_ARTICULO;

    -- Construir la consulta din치mica para actualizar
    VSQL := 'UPDATE ARTICULOS_CARRITO SET CANTIDAD = :cantidad WHERE ID_ARTICULO = :id';
DBMS_OUTPUT.PUT_LINE(VSQL);
    -- Ejecutar el SQL din치mico
    EXECUTE IMMEDIATE VSQL USING P_CANTIDAD, P_ID_ARTICULO;

    -- Confirmar la transacci칩n
    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        VCOD := SQLCODE;
        VMESS := SQLERRM;

        -- Registrar el error en auditor칤a
        BEGIN
            INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
            VALUES (VMESS, 'SP_EDITAR_ARTICULO_CARRITO', USER, SYSDATE);
            COMMIT;
            DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITADO: ' || VMESS);
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITOR칈A FALL칍: ' || SQLERRM);
        END;

        DBMS_OUTPUT.PUT_LINE('Error: ' || VCOD || ' - ' || VMESS);
END SP_EDITAR_ARTICULO_CARRITO;

--CHECKOUT
FUNCTION FN_OBTENER_SUBTOTAL_CARRITO (
    P_CARRITO IN NUMBER
) RETURN NUMBER
AS
    V_TOTAL NUMBER;
    V_ERROR VARCHAR2(4000);
BEGIN
    SELECT SUM(A.CANTIDAD * P.PRECIO)*1.13
    INTO V_TOTAL
    FROM ARTICULOS_CARRITO A
    INNER JOIN PRODUCTOS P ON A.ID_PRODUCTO = P.ID_PRODUCTO
    WHERE A.ID_CARRITO = P_CARRITO;

   RETURN V_TOTAL;

EXCEPTION
    WHEN OTHERS THEN
        V_ERROR := SQLERRM;
        BEGIN
            INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
            VALUES (V_ERROR, 'FN_OBTENER_SUBTOTAL_CARRITO', USER, SYSDATE);
            COMMIT;
            DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITADO: ' || V_ERROR);
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITOR칈A FALL칍: ' || SQLERRM);
        END;
        RAISE_APPLICATION_ERROR(-20001, 'Error en FN_OBTENER_SUBTOTAL_CARRITO: ' || V_ERROR);
END FN_OBTENER_SUBTOTAL_CARRITO;

PROCEDURE SP_EJECUTAR_CHECKOUT (
    P_CARRITO       IN NUMBER,
    P_ID_USUARIO    IN NUMBER,
    P_METODO_PAGO   IN VARCHAR2
)
AS
    V_SUBTOTAL   NUMBER;
    DATOS        SYS_REFCURSOR;
    VID          NUMBER;
    VID_ARTICULO NUMBER;
    VCANTIDAD    NUMBER;
    VNOMBRE      VARCHAR2(100);
    VPRECIO      NUMBER;
    VSUBTOTAL    NUMBER;
    VPEDIDO      NUMBER;
    V_ERROR      VARCHAR2(4000);
BEGIN
    V_SUBTOTAL := FN_OBTENER_SUBTOTAL_CARRITO(P_CARRITO);

    INSERT INTO PEDIDOS (FECHA, ID_USUARIO, ID_ESTADO, SUBTOTAL, TOTAL, METODO_PAGO)
    VALUES (SYSDATE, P_ID_USUARIO, 4, V_SUBTOTAL, V_SUBTOTAL * 1.13, P_METODO_PAGO);

    VPEDIDO := SEQ_PEDIDOS.CURRVAL;

    SP_GET_CARRITO_USUARIO(DATOS, P_CARRITO);

    LOOP
        FETCH DATOS INTO VID, VID_ARTICULO, VCANTIDAD, VNOMBRE, VPRECIO, VSUBTOTAL;
        EXIT WHEN DATOS%NOTFOUND;

        INSERT INTO PEDIDOS_DETALLES (
            ID_PEDIDO_DETALLE,
            CANTIDAD,
            ID_PEDIDO,
            ID_PRODUCTO
        )
        VALUES (
            SEQ_PEDIDOS_DETALLES.NEXTVAL,
            VCANTIDAD,
            VPEDIDO,
            VID
        );

        COMMIT;
    END LOOP;

    DELETE FROM ARTICULOS_CARRITO WHERE ID_CARRITO = P_CARRITO;

    COMMIT;

    CLOSE DATOS;

EXCEPTION
    WHEN OTHERS THEN
        V_ERROR := SQLERRM;
        -- Registrar error en auditor칤a
       BEGIN
            INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
            VALUES (V_ERROR, 'SP_EJECUTAR_CHECKOUT', USER, SYSDATE);
            COMMIT;
            DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITADO: ' || V_ERROR);
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITOR칈A FALL칍: ' || SQLERRM);
        END;
        -- Relanzar error personalizado
        RAISE_APPLICATION_ERROR(-20001, 'Error en SP_EJECUTAR_CHECKOUT: ' || V_ERROR);
END SP_EJECUTAR_CHECKOUT;

--TELEFONOS
PROCEDURE SP_GET_TELEFONOS_USUARIO (P_DATOS OUT SYS_REFCURSOR, P_ID IN NUMBER) AS
 V_ERROR VARCHAR2(4000);
 BEGIN
    OPEN P_DATOS FOR
    SELECT ID_TELEFONO, TELEFONO FROM TELEFONOS WHERE ID_ESTADO = 1 AND ID_USUARIO = P_ID; 
EXCEPTION
    WHEN NO_DATA_FOUND THEN
     V_ERROR := 'No se encontraron datos para el usuario con ID ' || P_ID;
        -- Registrar el error en la tabla de auditor칤a
        BEGIN
            INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
            VALUES (V_ERROR, 'SP_GET_TELEFONOS_USUARIO', USER, SYSDATE);
            COMMIT;
            DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITADO: ' || V_ERROR);
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITOR칈A FALL칍: ' || SQLERRM);
        END;
    RAISE_APPLICATION_ERROR(-20002, 'No se encontraron datos');
    WHEN OTHERS THEN
     V_ERROR := SQLERRM;
        -- Registrar el error en la tabla de auditor칤a
        BEGIN
            INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
            VALUES (V_ERROR, 'SP_GET_TELEFONOS_USUARIO', USER, SYSDATE);
            COMMIT;
            DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITADO: ' || V_ERROR);
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITOR칈A FALL칍: ' || SQLERRM);
        END;
    RAISE_APPLICATION_ERROR(-20001, SQLERRM);
 
 END SP_GET_TELEFONOS_USUARIO;
 
PROCEDURE SP_CRUD_TELEFONO (
    P_TELEFONO     IN NUMBER,
    P_ID           IN NUMBER,
    P_ACCION       IN NUMBER,
    P_ID_TELEFONO  IN NUMBER
) AS
    VSQL    VARCHAR2(1000);
    V_ERROR VARCHAR2(2000);
BEGIN
    IF P_ACCION = 1 THEN
        -- AGREGAR TEL칄FONO
        VSQL := 'INSERT INTO TELEFONOS (TELEFONO, ID_ESTADO, ID_USUARIO) VALUES (:1, :2, :3)';
        EXECUTE IMMEDIATE VSQL USING P_TELEFONO, 1, P_ID;
        COMMIT;

    ELSIF P_ACCION = 2 THEN
        -- ACTUALIZAR TEL칄FONO
        VSQL := 'UPDATE TELEFONOS SET TELEFONO = :1 WHERE ID_TELEFONO = :2';
        EXECUTE IMMEDIATE VSQL USING P_TELEFONO, P_ID_TELEFONO;
        COMMIT;

    ELSIF P_ACCION = 3 THEN
        -- ELIMINAR TEL칄FONO
        VSQL := 'DELETE FROM TELEFONOS WHERE ID_TELEFONO = :1';
        EXECUTE IMMEDIATE VSQL USING P_ID_TELEFONO;
        COMMIT;

    ELSE
        RAISE_APPLICATION_ERROR(-20001, 'Acci칩n no v치lida. Use 1 (insertar), 2 (actualizar), o 3 (eliminar)');
    END IF;

EXCEPTION
    WHEN OTHERS THEN
         V_ERROR := SQLERRM;
        -- Registrar error en la tabla de auditor칤a
        BEGIN
            INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
            VALUES (V_ERROR, 'TELEFONOS', USER, SYSDATE);
            COMMIT;
            DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITADO: ' || V_ERROR);
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITOR칈A FALL칍: ' || SQLERRM);
        END;
        RAISE_APPLICATION_ERROR(-20002, 'Error en SP_CRUD_TELEFONO: ' || V_ERROR);
END SP_CRUD_TELEFONO;

---DIRECCIONES
PROCEDURE SP_ELIMINAR_DIRECCION (P_ID IN NUMBER) AS
VSQL VARCHAR2(2000);
V_ERROR VARCHAR2(2000);
BEGIN
    VSQL := 'DELETE FROM DIRECCIONES WHERE ID_DIRECCION = :P_ID';
    EXECUTE IMMEDIATE VSQL USING P_ID;
    COMMIT;
EXCEPTION
WHEN OTHERS THEN
         V_ERROR := SQLERRM;
        INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'DIRECCIONES', USER, SYSDATE);
        -- Relanzar el error con un mensaje espec칤fico
        RAISE_APPLICATION_ERROR(-20002, 'Error al eliminar direccion');
END SP_ELIMINAR_DIRECCION;
PROCEDURE SP_GET_DIRECCION (P_DATOS OUT SYS_REFCURSOR, P_ID IN NUMBER) AS
V_ERROR VARCHAR2(2000);
BEGIN
    OPEN P_DATOS FOR
    SELECT D.DIRECCION_EXACTA, D.ID_DIRECCION, DIR.NOMBRE AS DISTRITO, DIR.ID_DISTRITO, C.NOMBRE AS CANTON, C.ID_CANTON, P.ID_PROVINCIA, P.NOMBRE AS PROVINCIA
    FROM DIRECCIONES D 
    INNER JOIN DISTRITOS DIR 
    ON D.ID_DISTRITO = DIR.ID_DISTRITO
    INNER JOIN CANTONES C
    ON C.ID_CANTON = DIR.ID_CANTON
    INNER JOIN PROVINCIAS P
    ON P.ID_PROVINCIA = C.ID_PROVINCIA
    WHERE D.ID_DIRECCION = P_ID;
EXCEPTION
WHEN OTHERS THEN
        V_ERROR := SQLERRM;
        INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'DIRECCIONES', USER, SYSDATE);
        RAISE_APPLICATION_ERROR(-20002, 'Error al obtener direcciones');

END SP_GET_DIRECCION;

PROCEDURE SP_GET_PROVINCIAS (P_DATOS OUT SYS_REFCURSOR) AS
  BEGIN
    OPEN P_DATOS FOR
    SELECT ID_PROVINCIA, NOMBRE FROM PROVINCIAS;
  EXCEPTION
    WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20001, SQLERRM);  
  END SP_GET_PROVINCIAS;
  
PROCEDURE SP_GET_CANTONES (P_DATOS OUT SYS_REFCURSOR, P_PROVINCIA IN NUMBER) AS
    BEGIN
    OPEN P_DATOS FOR
    SELECT ID_PROVINCIA, NOMBRE, ID_CANTON
    FROM CANTONES 
    WHERE ID_PROVINCIA = P_PROVINCIA;
  EXCEPTION
    WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20001, SQLERRM);  
END SP_GET_CANTONES;

PROCEDURE SP_GET_DISTRITOS (P_DATOS OUT SYS_REFCURSOR, P_CANTON IN NUMBER) AS
  BEGIN
  OPEN P_DATOS FOR
  SELECT ID_DISTRITO, NOMBRE FROM DISTRITOS WHERE ID_CANTON = P_CANTON;
  EXCEPTION
    WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20001, SQLERRM);
  END SP_GET_DISTRITOS;
  
PROCEDURE SP_AGREGAR_DIRECCION (P_ID IN NUMBER, P_DIRECCION IN VARCHAR2, P_DISTRITO IN NUMBER)
  AS
  V_ERROR VARCHAR2(1000);
  VSQL VARCHAR2(1000);
  BEGIN
    VSQL := 'INSERT INTO DIRECCIONES (DIRECCION_EXACTA, ID_DISTRITO, ID_USUARIO) VALUES (:1, :2, :3)';
    EXECUTE IMMEDIATE VSQL USING P_DIRECCION, P_DISTRITO, P_ID;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        V_ERROR := SQLERRM;
    INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'DIRECCIONES', USER, SYSDATE);
    RAISE_APPLICATION_ERROR(-20002, SQLERRM);
  
  END SP_AGREGAR_DIRECCION;

PROCEDURE SP_EDITAR_DIRECCION ( P_ID IN NUMBER, P_DIRECCION IN VARCHAR2, P_DISTRITO IN NUMBER
) AS
    VSQL VARCHAR2(1000);
    V_ERROR VARCHAR2(1000);
BEGIN
    VSQL := 'UPDATE DIRECCIONES 
             SET DIRECCION_EXACTA = :1, ID_DISTRITO = :2 
             WHERE ID_DIRECCION = :3';

    EXECUTE IMMEDIATE VSQL USING P_DIRECCION, P_DISTRITO, P_ID;
    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        V_ERROR := SQLERRM;
        INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'EDITAR_DIRECCION', USER, SYSDATE);
        RAISE_APPLICATION_ERROR(-20002, V_ERROR);
END SP_EDITAR_DIRECCION;

--CRUD USUARIOS Y LOGIN

PROCEDURE SP_CAMBIAR_CONTRASENA (
    P_USERNAME IN VARCHAR2,
    P_NUEVA_CONTRASENA IN VARCHAR2
) AS
    V_CONTAR NUMBER;
    V_ERROR VARCHAR2(4000);
BEGIN
    -- Validar formato de la contrase침a
     IF LENGTH(P_NUEVA_CONTRASENA) < 10 OR
    NOT REGEXP_LIKE(P_NUEVA_CONTRASENA, '[A-Z]') OR
    NOT REGEXP_LIKE(P_NUEVA_CONTRASENA, '[a-z]') OR
    NOT REGEXP_LIKE(P_NUEVA_CONTRASENA, '[0-9]') THEN
    RAISE_APPLICATION_ERROR(-20003, 'La contrase침a debe tener al menos 10 caracteres, una may칰scula, una min칰scula y un n칰mero.');
    END IF;
    -- Verifica si el usuario existe
    SELECT COUNT(*) INTO V_CONTAR FROM USUARIOS WHERE USERNAME = P_USERNAME;

    IF V_CONTAR = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'El usuario no existe.');
    END IF;

    -- Actualiza la contrase침a
    UPDATE USUARIOS
    SET CONTRASENA = P_NUEVA_CONTRASENA
    WHERE USERNAME = P_USERNAME;

    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        V_ERROR := SQLERRM;
        BEGIN
            INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
            VALUES (V_ERROR, 'SP_CAMBIAR_CONTRASENA', USER, SYSDATE);
            COMMIT;
            DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITADO: ' || V_ERROR);
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITOR칈A FALL칍: ' || SQLERRM);
        END;
        RAISE;
END;

FUNCTION FN_RECUPERAR_USUARIO (P_EMAIL IN VARCHAR2, P_NOMBRE IN VARCHAR2) RETURN VARCHAR2 AS
V_CONTAR NUMBER;
V_USERNAME VARCHAR2 (100);
V_COINCIDE NUMBER;
V_ERROR VARCHAR2(4000);
BEGIN
    SELECT COUNT(EMAIL) INTO V_CONTAR FROM USUARIOS WHERE LOWER(EMAIL) = LOWER(P_EMAIL); 
    IF V_CONTAR = 0 THEN
        V_USERNAME := 'Lo sentimos, no hay ning칰n usuario asociado al correo indicado';
        RETURN V_USERNAME;
    ELSE 
        SELECT COUNT(*) INTO V_COINCIDE FROM USUARIOS WHERE LOWER(EMAIL) = LOWER(P_EMAIL) AND LOWER(NOMBRE) = LOWER(P_NOMBRE);
        IF V_COINCIDE > 0 THEN
            SELECT USERNAME INTO V_USERNAME FROM USUARIOS WHERE LOWER(EMAIL) = LOWER(P_EMAIL) AND LOWER(NOMBRE) = LOWER(P_NOMBRE);
            RETURN V_USERNAME;
        ELSE 
            V_USERNAME := 'Lo sentimos, no hay ning칰n usuario asociado al correo y nombre indicado';
            RETURN V_USERNAME;
        END IF;
    END IF;
    EXCEPTION
WHEN OTHERS THEN
        V_ERROR := SQLERRM;
        BEGIN
            INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
            VALUES (V_ERROR, 'FN_RECUPERAR_USUARIO', USER, SYSDATE);
            COMMIT;
            DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITADO: ' || V_ERROR);
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITOR칈A FALL칍: ' || SQLERRM);
        END;
        RAISE_APPLICATION_ERROR(-20001, 'Error en FN_RECUPERAR_USUARIO: ' || V_ERROR);
END FN_RECUPERAR_USUARIO;

PROCEDURE SP_LISTAR_USUARIOS (
    P_CURSOR OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN P_CURSOR FOR
    SELECT 
        U.ID_USUARIO, 
        U.NOMBRE, 
        U.APELLIDO1, 
        U.APELLIDO2,
        U.USERNAME, 
        U.EMAIL, 
        U.ID_ROL,              
        R.DESCRIPCION AS ROL, 
        U.ID_ESTADO,          
        E.DESCRIPCION AS ESTADO
    FROM USUARIOS U
    LEFT JOIN ROLS R ON U.ID_ROL = R.ID_ROL
    LEFT JOIN ESTADOS E ON U.ID_ESTADO = E.ID_ESTADO
    ORDER BY U.ID_USUARIO;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20001, 'ERROR AL LISTAR USUARIOS: ' || SQLERRM);
END SP_LISTAR_USUARIOS;

PROCEDURE SP_AGREGAR_USUARIO(
    P_NOMBRE IN VARCHAR2,
    P_EMAIL IN VARCHAR2,
    P_ESTADO IN NUMBER,
    P_APELLIDO1 IN VARCHAR2,
    P_APELLIDO2 IN VARCHAR2,
    P_USERNAME IN VARCHAR2,
    P_CONTRASENA IN VARCHAR2,
    P_ROL IN NUMBER,
    P_ID_USUARIO OUT NUMBER
) AS
    V_COUNT_EMAIL NUMBER := 0;
    V_COUNT_USERNAME NUMBER := 0;
BEGIN
    -- Validar si el email ya existe
    SELECT COUNT(*) INTO V_COUNT_EMAIL 
    FROM USUARIOS 
    WHERE UPPER(EMAIL) = UPPER(P_EMAIL);

    IF LENGTH(P_CONTRASENA) < 10 OR
    NOT REGEXP_LIKE(P_CONTRASENA, '[A-Z]') OR
    NOT REGEXP_LIKE(P_CONTRASENA, '[a-z]') OR
    NOT REGEXP_LIKE(P_CONTRASENA, '[0-9]') THEN
    RAISE_APPLICATION_ERROR(-20003, 'La contrase침a debe tener al menos 10 caracteres, una may칰scula, una min칰scula y un n칰mero.');

    END IF;

    
    IF V_COUNT_EMAIL > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'El correo electr칩nico ya est치 registrado con otro usuario.');
    END IF;
    
    -- Validar si el username ya existe
    SELECT COUNT(*) INTO V_COUNT_USERNAME
    FROM USUARIOS 
    WHERE UPPER(USERNAME) = UPPER(P_USERNAME);
    
    IF V_COUNT_USERNAME > 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'El nombre de usuario ya est치 en uso. Por favor elija otro.');
    END IF;
    
    -- Obtener el siguiente ID para el usuario
    SELECT SEQ_USUARIOS.NEXTVAL INTO P_ID_USUARIO FROM DUAL;
    
    -- Insertar el nuevo usuario
    INSERT INTO USUARIOS (ID_USUARIO, NOMBRE, APELLIDO1, APELLIDO2, EMAIL, ID_ESTADO, USERNAME, CONTRASENA, ID_ROL)
    VALUES (P_ID_USUARIO, P_NOMBRE, P_APELLIDO1, P_APELLIDO2, P_EMAIL, P_ESTADO, P_USERNAME, P_CONTRASENA, P_ROL);
    
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        IF SQLCODE = -20001 OR SQLCODE = -20002 OR SQLCODE = -20003 THEN
            RAISE;
        ELSE
            RAISE_APPLICATION_ERROR(-20004, 'ERROR AL AGREGAR USUARIO: ' || SQLERRM);
        END IF;
END SP_AGREGAR_USUARIO;

PROCEDURE SP_EDITAR_USUARIO(
    P_ID_USUARIO   IN NUMBER,
    P_NOMBRE       IN VARCHAR2,
    P_APELLIDO1    IN VARCHAR2,
    P_APELLIDO2    IN VARCHAR2,
    P_EMAIL        IN VARCHAR2,
    P_ESTADO       IN NUMBER,
    P_USERNAME     IN VARCHAR2,
    P_CONTRASENA   IN VARCHAR2,
    P_ROL          IN NUMBER
)
AS
BEGIN
    IF P_CONTRASENA IS NOT NULL AND LENGTH(TRIM(P_CONTRASENA)) > 0 THEN
        UPDATE USUARIOS
        SET NOMBRE = P_NOMBRE,
            APELLIDO1 = P_APELLIDO1,
            APELLIDO2 = P_APELLIDO2,
            EMAIL = P_EMAIL,
            ID_ESTADO = P_ESTADO,
            USERNAME = P_USERNAME,
            CONTRASENA = P_CONTRASENA,
            ID_ROL = P_ROL
        WHERE ID_USUARIO = P_ID_USUARIO;
    ELSE
        UPDATE USUARIOS
        SET NOMBRE = P_NOMBRE,
            APELLIDO1 = P_APELLIDO1,
            APELLIDO2 = P_APELLIDO2,
            EMAIL = P_EMAIL,
            ID_ESTADO = P_ESTADO,
            USERNAME = P_USERNAME,
            ID_ROL = P_ROL
        WHERE ID_USUARIO = P_ID_USUARIO;
    END IF;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE_APPLICATION_ERROR(-20005, 'ERROR AL EDITAR USUARIO: ' || SQLERRM);
END SP_EDITAR_USUARIO;

PROCEDURE SP_CAMBIAR_ESTADO_USUARIO (
    P_ID_USUARIO IN NUMBER,
    P_NUEVO_ESTADO IN NUMBER
)
AS
BEGIN
    UPDATE USUARIOS
    SET ID_ESTADO = P_NUEVO_ESTADO
    WHERE ID_USUARIO = P_ID_USUARIO;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE_APPLICATION_ERROR(-20006, 'ERROR AL CAMBIAR ESTADO DEL USUARIO: ' || SQLERRM);
END SP_CAMBIAR_ESTADO_USUARIO;

PROCEDURE SP_VERIFICAR_USUARIO(
    p_username IN VARCHAR2,
    p_id_usuario OUT NUMBER,
    p_id_rol OUT NUMBER,
    p_rol_descripcion OUT VARCHAR2,
    p_email OUT VARCHAR2,
    p_contrasena OUT VARCHAR2,
    p_nombre OUT VARCHAR2,
    p_id_carrito OUT NUMBER,
    p_estado_usuario   OUT NUMBER
)
AS
BEGIN
    SELECT ID_USUARIO, ID_ROL, ROL_DESCRIPCION, EMAIL, CONTRASENA, NOMBRE, ID_CARRITO, ID_ESTADO
    INTO p_id_usuario, p_id_rol, p_rol_descripcion, p_email, p_contrasena, p_nombre, p_id_carrito, p_estado_usuario
    FROM V_USUARIOS_ROLES 
    WHERE USERNAME = p_username;
    
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        p_id_usuario := NULL;
        p_id_rol := NULL;
        p_rol_descripcion := NULL;
        p_email := NULL;
        p_contrasena := NULL;
        p_nombre := NULL;
        p_id_carrito := NULL;
        p_estado_usuario := NULL;
    WHEN OTHERS THEN
        RAISE;
END SP_VERIFICAR_USUARIO;

PROCEDURE SP_OBTENER_ROLES (
    P_CURSOR OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN P_CURSOR FOR
    SELECT ID_ROL, DESCRIPCION FROM ROLS ORDER BY ID_ROL;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20002, 'ERROR AL OBTENER ROLES: ' || SQLERRM);
END SP_OBTENER_ROLES;

PROCEDURE SP_CREAR_CARRITO(
    P_ID_USUARIO IN NUMBER
) AS
    V_ID_CARRITO NUMBER;
BEGIN
    SELECT SEQ_CARRITO.NEXTVAL INTO V_ID_CARRITO FROM DUAL;

    INSERT INTO CARRITO (ID_CARRITO, ID_USUARIO, FECHA_CREACION)
    VALUES (V_ID_CARRITO, P_ID_USUARIO, SYSDATE);

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE_APPLICATION_ERROR(-20005, 'ERROR AL CREAR CARRITO: ' || SQLERRM);
END SP_CREAR_CARRITO;

--CONSULTAS

 PROCEDURE SP_AGREGAR_CONSULTA(P_ID IN NUMBER, P_TIPO IN VARCHAR2, P_MENSAJE VARCHAR2)
 AS
 VSQL VARCHAR2(1000);
 V_ERROR VARCHAR2(2000);
 BEGIN
    VSQL := 'INSERT INTO CONSULTAS (ID_USUARIO, TIPO, MENSAJE, ID_ESTADO, FECHA) VALUES (:usuario, :tipo, :mensaje, :id, :fecha)';
    EXECUTE IMMEDIATE VSQL USING P_ID, P_TIPO, P_MENSAJE, 4, TO_DATE(SYSDATE, 'YYYY-MM-DD');
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        V_ERROR := SQLERRM;
     BEGIN
            INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
            VALUES (V_ERROR, 'SP_AGREGAR_CONSULTA', USER, SYSDATE);
            COMMIT;
            DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITADO: ' || V_ERROR);
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITOR칈A FALL칍: ' || SQLERRM);
        END;
        RAISE_APPLICATION_ERROR(-20002,'ERROR EN SP AGREGAR CONSULTA' || SQLERRM);
 END SP_AGREGAR_CONSULTA;

 PROCEDURE SP_GET_CONSULTA_USUARIO (P_CURSOR OUT SYS_REFCURSOR, P_ID IN NUMBER)
 AS
 V_ERROR VARCHAR2(2000);
 BEGIN 
    OPEN P_CURSOR FOR
        SELECT C.TIPO, C.MENSAJE, E.DESCRIPCION AS ESTADO
        FROM CONSULTAS C
        INNER JOIN ESTADOS E
        ON C.ID_ESTADO = E.ID_ESTADO
        WHERE C.ID_USUARIO = P_ID;
 EXCEPTION
 WHEN OTHERS THEN
        V_ERROR := SQLERRM;
    BEGIN
            INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
            VALUES (V_ERROR, 'SP_GET_CONSULTA_USUARIO', USER, SYSDATE);
            COMMIT;
            DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITADO: ' || V_ERROR);
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITOR칈A FALL칍: ' || SQLERRM);
        END;
    RAISE_APPLICATION_ERROR(-20002, SQLERRM);
 END SP_GET_CONSULTA_USUARIO;

PROCEDURE SP_GET_CONSULTAS (
    P_CURSOR OUT SYS_REFCURSOR
)
AS
    V_ERROR VARCHAR2(4000);
BEGIN
    OPEN P_CURSOR FOR
    SELECT 
        C.FECHA,
        C.ID_CONSULTA,
        C.TIPO,
        C.MENSAJE,
        C.ID_ESTADO,
        E.DESCRIPCION AS ESTADO,
        U.NOMBRE || ' ' || U.APELLIDO1 || ' ' || U.APELLIDO2 AS USUARIO,
        U.EMAIL,
        (
            SELECT TELEFONO 
            FROM TELEFONOS 
            WHERE ID_USUARIO = U.ID_USUARIO AND ID_ESTADO = 1
            AND ROWNUM = 1
        ) AS TELEFONO_ACTIVO
    FROM CONSULTAS C
    INNER JOIN ESTADOS E ON E.ID_ESTADO = C.ID_ESTADO
    INNER JOIN USUARIOS U ON C.ID_USUARIO = U.ID_USUARIO;

EXCEPTION
    WHEN OTHERS THEN
        V_ERROR := SQLERRM;
         BEGIN
            INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
            VALUES (V_ERROR, 'SP_GET_CONSULTAS', USER, SYSDATE);
            COMMIT;
            DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITADO: ' || V_ERROR);
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITOR칈A FALL칍: ' || SQLERRM);
        END;
        RAISE_APPLICATION_ERROR(-20001, 'Error en SP_GET_CONSULTAS: ' || V_ERROR);
END SP_GET_CONSULTAS;

PROCEDURE SP_CRUD_CONSULTAS (
    P_ACCION IN NUMBER,
    P_ID     IN NUMBER
)
AS
    VSQL    VARCHAR2(1000);
    V_ERROR VARCHAR2(4000);
BEGIN
    IF P_ACCION = 1 THEN
        -- Marcar como contestada
        VSQL := 'UPDATE CONSULTAS SET ID_ESTADO = :1 WHERE ID_CONSULTA = :2';
        EXECUTE IMMEDIATE VSQL USING 6, P_ID;
        COMMIT;
    
    ELSIF P_ACCION = 2 THEN
        -- Marcar como pendiente
        VSQL := 'UPDATE CONSULTAS SET ID_ESTADO = :1 WHERE ID_CONSULTA = :2';
        EXECUTE IMMEDIATE VSQL USING 3, P_ID;
        COMMIT;
    
    ELSE
        -- Acci칩n no v치lida
        RAISE_APPLICATION_ERROR(-20001, 'Acci칩n Inv치lida');
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        V_ERROR := SQLERRM;
        BEGIN
            INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
            VALUES (V_ERROR, 'SP_CRUD_CONSULTAS', USER, SYSDATE);
            COMMIT;
            DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITADO: ' || V_ERROR);
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITOR칈A FALL칍: ' || SQLERRM);
        END;
        RAISE;
END SP_CRUD_CONSULTAS;


----- MI PERFIL -----
PROCEDURE SP_GET_DIRECCIONES_USUARIO (P_DATOS OUT SYS_REFCURSOR, P_ID IN NUMBER) AS
V_ERROR VARCHAR2(2000);
BEGIN
    OPEN P_DATOS FOR
    SELECT D.DIRECCION_EXACTA, D.ID_DIRECCION, DIR.NOMBRE AS DISTRITO, C.NOMBRE AS CANTON, P.NOMBRE AS PROVINCIA
    FROM DIRECCIONES D 
    INNER JOIN DISTRITOS DIR 
    ON D.ID_DISTRITO = DIR.ID_DISTRITO
    INNER JOIN CANTONES C
    ON C.ID_CANTON = DIR.ID_CANTON
    INNER JOIN PROVINCIAS P
    ON P.ID_PROVINCIA = C.ID_PROVINCIA
    WHERE D.ID_USUARIO = P_ID;
EXCEPTION
WHEN OTHERS THEN
        V_ERROR := SQLERRM;
        BEGIN
            INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
            VALUES (V_ERROR, 'SP_GET_DIRECCIONES_USUARIO', USER, SYSDATE);
            COMMIT;
            DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITADO: ' || V_ERROR);
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITOR칈A FALL칍: ' || SQLERRM);
        END;
        RAISE_APPLICATION_ERROR(-20002, 'Error al obtener direcciones');
END SP_GET_DIRECCIONES_USUARIO;

PROCEDURE SP_ACTUALIZAR_INFORMACION_PERFIL (
    P_ID IN NUMBER,
    P_NOMBRE IN VARCHAR2,
    P_APELLIDO1 IN VARCHAR2,
    P_APELLIDO2 IN VARCHAR2,
    P_EMAIL IN VARCHAR2
) AS
    V_ERROR VARCHAR2(2000);
    VSQL VARCHAR2(1000);
    CURSOR C_EMAIL_EXISTE IS
        SELECT 1 FROM USUARIOS 
        WHERE lower(EMAIL) = lower(P_EMAIL) AND ID_USUARIO != P_ID;
    V_EXISTE_EMAIL C_EMAIL_EXISTE%ROWTYPE;
BEGIN
    -- Validaci칩n de correo duplicado
    OPEN C_EMAIL_EXISTE;
    FETCH C_EMAIL_EXISTE INTO V_EXISTE_EMAIL;
    IF C_EMAIL_EXISTE%FOUND THEN
        CLOSE C_EMAIL_EXISTE;
        RAISE_APPLICATION_ERROR(-20003, 'El correo electr칩nico ya est치 registrado por otro usuario');
    END IF;
    CLOSE C_EMAIL_EXISTE;

    -- Actualizaci칩n
    VSQL := '
        UPDATE USUARIOS
        SET NOMBRE = :1,
            APELLIDO1 = :2,
            APELLIDO2 = :3,
            EMAIL = :4
        WHERE ID_USUARIO = :5';

    EXECUTE IMMEDIATE VSQL USING 
        P_NOMBRE, P_APELLIDO1, P_APELLIDO2, lower(P_EMAIL), P_ID;

    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        V_ERROR := SQLERRM;
        BEGIN
            INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
            VALUES (V_ERROR, 'SP_ACTUALIZAR_INFORMACION_PERFIL', USER, SYSDATE);
            COMMIT;
            DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITADO: ' || V_ERROR);
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITOR칈A FALL칍: ' || SQLERRM);
        END;
        RAISE;
END SP_ACTUALIZAR_INFORMACION_PERFIL;

PROCEDURE SP_GET_INFORMACION_USUARIO (P_DATOS OUT SYS_REFCURSOR, P_ID IN NUMBER) AS
V_ERROR VARCHAR2(2000);
BEGIN
    OPEN P_DATOS FOR
    SELECT NOMBRE, EMAIL, USERNAME, APELLIDO1, APELLIDO2 FROM USUARIOS WHERE ID_USUARIO = P_ID;
EXCEPTION
    WHEN OTHERS THEN
    V_ERROR := SQLERRM;
    BEGIN
        INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
        VALUES (V_ERROR, 'SP_GET_INFORMACION_USUARIO', USER, SYSDATE);
            COMMIT;
        DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITADO: ' || V_ERROR);
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITOR칈A FALL칍: ' || SQLERRM);
        END;
        RAISE_APPLICATION_ERROR(-20002, SQLERRM);
END SP_GET_INFORMACION_USUARIO;

FUNCTION FN_CONTAR_PEDIDOS(P_ID IN NUMBER) RETURN NUMBER
AS
V_CONTAR NUMBER;
V_ERROR VARCHAR2(2000);
BEGIN
    SELECT COUNT(*) INTO V_CONTAR FROM PEDIDOS WHERE ID_USUARIO = P_ID;
    RETURN V_CONTAR;
EXCEPTION
    WHEN OTHERS THEN
    V_ERROR := SQLERRM;
    BEGIN
            INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
            VALUES (V_ERROR, 'FN_CONTAR_PEDIDOS', USER, SYSDATE);
            COMMIT;
            DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITADO: ' || V_ERROR);
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITOR칈A FALL칍: ' || SQLERRM);
        END;
        RAISE_APPLICATION_ERROR(SQLCODE, SQLERRM);
END FN_CONTAR_PEDIDOS;

PROCEDURE SP_GET_PEDIDOS_USUARIO (
    P_DATOS OUT SYS_REFCURSOR,
    P_ID    IN  NUMBER
)
AS
    V_ERROR VARCHAR2(2000);
BEGIN
    OPEN P_DATOS FOR
        SELECT P.ID_PEDIDO,
               P.FECHA,
               E.DESCRIPCION AS ESTADO,
               P.TOTAL,
               P.METODO_PAGO
        FROM PEDIDOS P
        INNER JOIN ESTADOS E ON P.ID_ESTADO = E.ID_ESTADO
        WHERE P.ID_USUARIO = P_ID;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        V_ERROR := SQLERRM;
        BEGIN
            INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
            VALUES (V_ERROR, 'SP_GET_PEDIDOS_USUARIO', USER, SYSDATE);
            COMMIT;
        END;
        RAISE_APPLICATION_ERROR(-20002, 'El usuario no tiene pedidos');

    WHEN OTHERS THEN
        V_ERROR := SQLERRM;
        BEGIN
            INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
            VALUES (V_ERROR, 'SP_GET_PEDIDOS_USUARIO', USER, SYSDATE);
            COMMIT;
        END;
        RAISE_APPLICATION_ERROR(-20001, V_ERROR);
END SP_GET_PEDIDOS_USUARIO;


PROCEDURE SP_GET_PEDIDOS_DETALLES (
    P_DATOS OUT SYS_REFCURSOR,
    P_ID    IN  NUMBER
)
AS
    V_ERROR VARCHAR2(2000);
BEGIN
    OPEN P_DATOS FOR
        SELECT PD.ID_PEDIDO_DETALLE,
               PD.CANTIDAD,
               PD.CANTIDAD * P.PRECIO AS SUBTOTAL,
               P.PRECIO,
               P.NOMBRE AS PRODUCTO
        FROM PEDIDOS_DETALLES PD
        INNER JOIN PRODUCTOS P ON PD.ID_PRODUCTO = P.ID_PRODUCTO
        WHERE PD.ID_PEDIDO = P_ID;

EXCEPTION
    WHEN OTHERS THEN
        V_ERROR := SQLERRM;
        BEGIN
            INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
            VALUES (V_ERROR, 'SP_GET_PEDIDOS_DETALLES', USER, SYSDATE);
            COMMIT;
        END;
        RAISE_APPLICATION_ERROR(-20001, V_ERROR);
END SP_GET_PEDIDOS_DETALLES;


----- CRUD PRODUCTOS -----
 FUNCTION FN_CONTAR_PRODUCTOS_REGISTRADOS RETURN NUMBER
AS
    V_ERROR   VARCHAR2(2000);
    V_CONTAR  NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO V_CONTAR
    FROM PRODUCTOS
    WHERE ID_ESTADO = 1;

    RETURN V_CONTAR;

EXCEPTION 
    WHEN OTHERS THEN
        V_ERROR := SQLERRM;
        BEGIN
            INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
            VALUES (V_ERROR, 'FN_CONTAR_PRODUCTOS_REGISTRADOS', USER, SYSDATE);
            COMMIT;
        END;
        RAISE_APPLICATION_ERROR(-20002, V_ERROR);
END FN_CONTAR_PRODUCTOS_REGISTRADOS;


PROCEDURE SP_AGREGAR_PRODUCTO (
    P_PRECIO     IN NUMBER,
    P_CATEGORIA  IN NUMBER,
    P_DESCRIPCION IN VARCHAR2,
    P_NOMBRE     IN VARCHAR2,
    P_IMAGEN     IN VARCHAR2
) 
AS
    VSQL   VARCHAR2(400);
    V_ERROR VARCHAR2(2000);
BEGIN
    VSQL := 'INSERT INTO PRODUCTOS (PRECIO, ID_CATEGORIA, ID_ESTADO, DESCRIPCION, NOMBRE, IMAGEN)
             VALUES (:precio, :idCategoria, :estado, :descripcion, :nombre, :imagen)';
             
    EXECUTE IMMEDIATE VSQL 
        USING P_PRECIO, P_CATEGORIA, 1, P_DESCRIPCION, P_NOMBRE, P_IMAGEN;
    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        V_ERROR := SQLERRM;
        BEGIN
            INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
            VALUES (V_ERROR, 'SP_AGREGAR_PRODUCTO', USER, SYSDATE);
            COMMIT;
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('>>> FALLO LA AUDITOR칈A DE ERRORES: ' || SQLERRM);
        END;
        RAISE_APPLICATION_ERROR(-20001, V_ERROR);
END SP_AGREGAR_PRODUCTO;


PROCEDURE SP_EDITAR_PRODUCTO (
    P_PRECIO     IN NUMBER,
    P_CATEGORIA  IN NUMBER,
    P_DESCRIPCION IN VARCHAR2,
    P_NOMBRE     IN VARCHAR2,
    P_IMAGEN     IN VARCHAR2,
    P_ESTADO     IN NUMBER,
    P_ID         IN NUMBER
)
AS
    VSQL    VARCHAR2(500);
    V_ERROR VARCHAR2(2000);
BEGIN
    VSQL := 'UPDATE PRODUCTOS 
             SET PRECIO = :precio,
                 ID_CATEGORIA = :categoria,
                 DESCRIPCION = :descripcion,
                 NOMBRE = :nombre,
                 IMAGEN = :imagen,
                 ID_ESTADO = :estado
             WHERE ID_PRODUCTO = :idProducto';

    EXECUTE IMMEDIATE VSQL 
        USING P_PRECIO, P_CATEGORIA, P_DESCRIPCION, P_NOMBRE, P_IMAGEN, P_ESTADO, P_ID;

    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        V_ERROR := SQLERRM;
        BEGIN
            INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA) 
            VALUES (V_ERROR, 'SP_EDITAR_PRODUCTO', USER, SYSDATE);
            COMMIT;
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('>>> FALLO LA AUDITOR칈A DE ERRORES: ' || SQLERRM);
        END;
        RAISE_APPLICATION_ERROR(-20002, V_ERROR);
END SP_EDITAR_PRODUCTO;

PROCEDURE SP_ELIMINAR_ACTIVAR_PRODUCTO (
    P_ID     IN NUMBER,
    P_ESTADO IN NUMBER
)
AS
    VSQL    VARCHAR2(200);
    V_ERROR VARCHAR2(2000);
BEGIN
    VSQL := 'UPDATE PRODUCTOS SET ID_ESTADO = :estado WHERE ID_PRODUCTO = :idProducto';
    EXECUTE IMMEDIATE VSQL USING P_ESTADO, P_ID;
    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        V_ERROR := SQLERRM;
        BEGIN
            INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
            VALUES (V_ERROR, 'SP_ELIMINAR_ACTIVAR_PRODUCTO', USER, SYSDATE);
            COMMIT;
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('>>> FALLO LA AUDITOR칈A DE ERRORES: ' || SQLERRM);
        END;
        RAISE_APPLICATION_ERROR(-20003, V_ERROR);
END SP_ELIMINAR_ACTIVAR_PRODUCTO;

PROCEDURE SP_GET_PRODUCTOS (
    P_DATOS OUT SYS_REFCURSOR
) AS
    V_ERROR VARCHAR2(2000);
BEGIN
    OPEN P_DATOS FOR
    SELECT 
        P.ID_PRODUCTO, 
        P.PRECIO, 
        C.DESCRIPCION AS CATEGORIA, 
        P.DESCRIPCION, 
        P.NOMBRE, 
        P.IMAGEN, 
        E.DESCRIPCION AS ESTADO, 
        P.ID_ESTADO
    FROM PRODUCTOS P
    INNER JOIN CATEGORIAS_PRODUCTOS C ON P.ID_CATEGORIA = C.ID_CATEGORIA
    INNER JOIN ESTADOS E ON P.ID_ESTADO = E.ID_ESTADO;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        V_ERROR := SQLERRM;
        BEGIN
            INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
            VALUES (V_ERROR, 'SP_GET_PRODUCTOS', USER, SYSDATE);
            COMMIT;
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('>>> FALLO LA AUDITOR칈A DE NO_DATA_FOUND: ' || SQLERRM);
        END;
        RAISE_APPLICATION_ERROR(-20004, 'No se encontraron productos.');

    WHEN OTHERS THEN
        V_ERROR := SQLERRM;
        BEGIN
            INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
            VALUES (V_ERROR, 'SP_GET_PRODUCTOS', USER, SYSDATE);
            COMMIT;
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('>>> FALLO LA AUDITOR칈A GENERAL: ' || SQLERRM);
        END;
        RAISE_APPLICATION_ERROR(-20003, V_ERROR);
END SP_GET_PRODUCTOS;


PROCEDURE SP_GET_CATEGORIAS (
    P_DATOS OUT SYS_REFCURSOR
) AS
    V_ERROR VARCHAR2(2000);
BEGIN
    OPEN P_DATOS FOR
    SELECT ID_CATEGORIA, DESCRIPCION, ID_ESTADO
    FROM CATEGORIAS_PRODUCTOS;

EXCEPTION
    WHEN OTHERS THEN
        V_ERROR := SQLERRM;
        BEGIN
            INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
            VALUES (V_ERROR, 'SP_GET_CATEGORIAS', USER, SYSDATE);
            COMMIT;
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('>>> FALLO LA AUDITOR칈A DE CATEGOR칈AS: ' || SQLERRM);
        END;
        RAISE_APPLICATION_ERROR(-20003, 'Error al obtener las categor칤as: ' || V_ERROR);
END SP_GET_CATEGORIAS;

PROCEDURE SP_OBTENER_PRODUCTO_POR_ID  (
    P_DATOS OUT SYS_REFCURSOR,
    P_ID    IN  NUMBER
)
AS
    V_ERROR VARCHAR2(2000);
BEGIN
    OPEN P_DATOS FOR
    SELECT ID_PRODUCTO, PRECIO, ID_CATEGORIA, ID_ESTADO, DESCRIPCION, NOMBRE, IMAGEN
    FROM PRODUCTOS 
    WHERE ID_PRODUCTO = P_ID;
EXCEPTION
    WHEN OTHERS THEN
        V_ERROR := SQLERRM;
        BEGIN
            INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
            VALUES (V_ERROR, 'SP_GET_PRODUCTO_ID', USER, SYSDATE);
            COMMIT;
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('>>> FALLO LA AUDITOR칈A DE PRODUCTO POR ID: ' || SQLERRM);
        END;
        RAISE_APPLICATION_ERROR(-20005, 'Error al obtener el producto por ID: ' || V_ERROR);
END SP_OBTENER_PRODUCTO_POR_ID;


PROCEDURE SP_GET_PRODUCTOS_ACTIVOS (
    P_DATOS OUT SYS_REFCURSOR
)
AS
    V_PRODUCTOS NUMBER;
    V_ERROR     VARCHAR2(2000);
BEGIN
    V_PRODUCTOS := FN_CONTAR_PRODUCTOS_REGISTRADOS;

    IF V_PRODUCTOS > 0 THEN
        OPEN P_DATOS FOR
        SELECT ID_PRODUCTO, PRECIO, ID_CATEGORIA, ID_ESTADO, DESCRIPCION, NOMBRE, IMAGEN
        FROM PRODUCTOS 
        WHERE ID_ESTADO = 1;
    ELSE
        OPEN P_DATOS FOR
        SELECT 'No hay productos registrados' AS MENSAJE,
               NULL AS ID_PRODUCTO,
               NULL AS PRECIO,
               NULL AS ID_CATEGORIA,
               NULL AS ID_ESTADO,
               NULL AS DESCRIPCION,
               NULL AS NOMBRE,
               NULL AS IMAGEN
        FROM DUAL;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        V_ERROR := SQLERRM;
        BEGIN
            INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
            VALUES (V_ERROR, 'SP_GET_PRODUCTOS_ACTIVOS', USER, SYSDATE);
            COMMIT;
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('>>> ERROR EN AUDITOR칈A PRODUCTOS_ACTIVOS: ' || SQLERRM);
        END;
        RAISE_APPLICATION_ERROR(-20006, 'Error al obtener productos activos: ' || V_ERROR);
END SP_GET_PRODUCTOS_ACTIVOS;

-------------------------------------CRUD CATEGORIAS
 PROCEDURE SP_CRUD_CATEGORIAS (
    DESCRIPCION IN VARCHAR2,
    P_ID        IN NUMBER,
    P_ACCION    IN NUMBER
)
AS
    VSQL    VARCHAR2(1000);
    V_ERROR VARCHAR2(4000);
BEGIN
    -- Agregar
    IF P_ACCION = 1 THEN
        VSQL := 'INSERT INTO CATEGORIAS_PRODUCTOS (DESCRIPCION, ID_ESTADO) VALUES (:1,:2)';
        EXECUTE IMMEDIATE VSQL USING DESCRIPCION, 1;
        COMMIT;

    -- Actualizar
    ELSIF P_ACCION = 2 THEN
        VSQL := 'UPDATE CATEGORIAS_PRODUCTOS SET DESCRIPCION = :1 WHERE ID_CATEGORIA = :2';
        EXECUTE IMMEDIATE VSQL USING DESCRIPCION, P_ID;
        COMMIT;

    -- Desactivar
    ELSIF P_ACCION = 3 THEN
        -- Desactivar la categor칤a
        VSQL := 'UPDATE CATEGORIAS_PRODUCTOS SET ID_ESTADO = :1 WHERE ID_CATEGORIA = :2';
        EXECUTE IMMEDIATE VSQL USING 2, P_ID;

        -- Desactivar productos asociados
        VSQL := 'UPDATE PRODUCTOS SET ID_ESTADO = :1 WHERE ID_CATEGORIA = :2';
        EXECUTE IMMEDIATE VSQL USING 2, P_ID;
        COMMIT;

    -- Activar
    ELSIF P_ACCION = 4 THEN
        VSQL := 'UPDATE CATEGORIAS_PRODUCTOS SET ID_ESTADO = :1 WHERE ID_CATEGORIA = :2';
        EXECUTE IMMEDIATE VSQL USING 1, P_ID;
        COMMIT;
    ELSE 
        RAISE_APPLICATION_ERROR(-20001, 'Acci칩n Inv치lida');
    END IF;

EXCEPTION
      WHEN OTHERS THEN
        V_ERROR := SQLERRM;
        BEGIN
            INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
            VALUES (V_ERROR, 'SP_CRUD_CATEGORIAS', USER, SYSDATE);
            COMMIT;
            DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITADO: ' || V_ERROR);
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('>>> ERROR AUDITOR칈A FALL칍: ' || SQLERRM);
        END;
        RAISE;
END SP_CRUD_CATEGORIAS;

PROCEDURE SP_GET_PRODUCTOS_CATEGORIAS (
    P_DATOS     OUT SYS_REFCURSOR,
    P_CATEGORIA IN  NUMBER
)
AS
    V_PRODUCTOS NUMBER;
    V_ERROR     VARCHAR2(4000);
BEGIN
    V_PRODUCTOS := FN_CONTAR_PRODUCTOS_REGISTRADOS;

    IF V_PRODUCTOS > 0 THEN
        OPEN P_DATOS FOR
        SELECT ID_PRODUCTO, PRECIO, ID_CATEGORIA, ID_ESTADO, DESCRIPCION, NOMBRE, IMAGEN
        FROM PRODUCTOS 
        WHERE ID_ESTADO = 1 AND ID_CATEGORIA = P_CATEGORIA;
    ELSE
        OPEN P_DATOS FOR
        SELECT 'No hay productos registrados' AS MENSAJE,
               NULL AS ID_PRODUCTO,
               NULL AS PRECIO,
               NULL AS ID_CATEGORIA,
               NULL AS ID_ESTADO,
               NULL AS DESCRIPCION,
               NULL AS NOMBRE,
               NULL AS IMAGEN
        FROM DUAL;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        V_ERROR := SQLERRM;
        BEGIN
            INSERT INTO AUDITORIA_ERRORES_LEGADO (VERROR, ORIGEN, VUSER, FECHA)
            VALUES (V_ERROR, 'SP_GET_PRODUCTOS_CATEGORIAS', USER, SYSDATE);
            COMMIT;
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('>>> ERROR EN AUDITOR칈A CATEGORIAS: ' || SQLERRM);
        END;
        RAISE_APPLICATION_ERROR(-20001, 'Error en SP_GET_PRODUCTOS_CATEGORIAS: ' || V_ERROR);
END SP_GET_PRODUCTOS_CATEGORIAS;


END PKG_LEGADO;

--------------------------------------------------------------------------------

INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, ID_CATEGORIA, IMAGEN, ID_ESTADO) VALUES
('Hamburguesas 60g', 'Paquete de 10 unidades', 1800, 2, './imgProductos/hamburguesa.jpg', 1)

INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, ID_CATEGORIA, IMAGEN, ID_ESTADO) VALUES
('Cupcakes', 'Caja con 6 unidades', 2500, 1, './imgProductos/cupcake.jpg', 1)

INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, ID_CATEGORIA, IMAGEN, ID_ESTADO) VALUES
('Empanadas', 'Paquete de 6 empanaditas de pollo', 1800, 5 , './imgProductos/hamburguesa.jpg', 1)

INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, ID_CATEGORIA, IMAGEN, ID_ESTADO) VALUES
('Pastel de Fresa', 'Delicioso pastel de fresa - 12 porciones', 10800, 1, './imgProductos/pastel.jpg', 1)

----INSERTS DE PROVINCIAS

INSERT INTO PROVINCIAS (NOMBRE) VALUES ('San Jos칠');
INSERT INTO PROVINCIAS (NOMBRE) VALUES ('Alajuela');
INSERT INTO PROVINCIAS (NOMBRE) VALUES ('Cartago');
INSERT INTO PROVINCIAS (NOMBRE) VALUES ('Heredia');
INSERT INTO PROVINCIAS (NOMBRE) VALUES ('Guanacaste');
INSERT INTO PROVINCIAS (NOMBRE) VALUES ('Puntarenas');
INSERT INTO PROVINCIAS (NOMBRE) VALUES ('Lim칩n');

---INSERTS CANTONES
INSERT INTO cantones (nombre, id_provincia) VALUES ('San Jos칠', 1);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Escaz칰', 1);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Desamparados', 1);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Puriscal', 1);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Tarraz칰', 1);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Aserr칤', 1);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Mora', 1);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Goicoechea', 1);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Santa Ana', 1);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Alajuelita', 1);
INSERT INTO cantones (nombre, id_provincia) VALUES ('V치zquez de Coronado', 1);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Acosta', 1);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Tib치s', 1);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Moravia', 1);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Montes de Oca', 1);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Turrubares', 1);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Dota', 1);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Curridabat', 1);
INSERT INTO cantones (nombre, id_provincia) VALUES ('P칠rez Zeled칩n', 1);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Le칩n Cort칠s Castro', 1);

INSERT INTO cantones (nombre, id_provincia) VALUES ('Alajuela', 2);
INSERT INTO cantones (nombre, id_provincia) VALUES ('San Ram칩n', 2);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Grecia', 2);
INSERT INTO cantones (nombre, id_provincia) VALUES ('San Mateo', 2);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Atenas', 2);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Naranjo', 2);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Palmares', 2);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Po치s', 2);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Orotina', 2);
INSERT INTO cantones (nombre, id_provincia) VALUES ('San Carlos', 2);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Zarcero', 2);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Valverde Vega', 2);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Upala', 2);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Los Chiles', 2);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Guatuso', 2);
INSERT INTO cantones (nombre, id_provincia) VALUES ('R칤o Cuarto', 2);

INSERT INTO cantones (nombre, id_provincia) VALUES ('Cartago', 3);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Para칤so', 3);
INSERT INTO cantones (nombre, id_provincia) VALUES ('La Uni칩n', 3);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Jim칠nez', 3);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Turrialba', 3);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Alvarado', 3);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Oreamuno', 3);
INSERT INTO cantones (nombre, id_provincia) VALUES ('El Guarco', 3);

INSERT INTO cantones (nombre, id_provincia) VALUES ('Heredia', 4);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Barva', 4);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Santo Domingo', 4);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Santa B치rbara', 4);
INSERT INTO cantones (nombre, id_provincia) VALUES ('San Rafael', 4);
INSERT INTO cantones (nombre, id_provincia) VALUES ('San Isidro', 4);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Bel칠n', 4);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Flores', 4);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Sarapiqu칤', 4);

INSERT INTO cantones (nombre, id_provincia) VALUES ('Liberia', 5);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Nicoya', 5);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Santa Cruz', 5);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Bagaces', 5);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Carrillo', 5);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Ca침as', 5);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Abangares', 5);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Tilar치n', 5);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Nandayure', 5);
INSERT INTO cantones (nombre, id_provincia) VALUES ('La Cruz', 5);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Hojancha', 5);


INSERT INTO cantones (nombre, id_provincia) VALUES ('Puntarenas', 6);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Esparza', 6);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Buenos Aires', 6);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Montes de Oro', 6);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Osa', 6);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Quepos', 6);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Golfito', 6);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Coto Brus', 6);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Parrita', 6);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Corredores', 6);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Garabito', 6);


INSERT INTO cantones (nombre, id_provincia) VALUES ('Lim칩n', 7);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Pococ칤', 7);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Siquirres', 7);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Talamanca', 7);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Matina', 7);
INSERT INTO cantones (nombre, id_provincia) VALUES ('Gu치cimo', 7);

---INSERTS DISTRITOS
INSERT INTO distritos (nombre, id_canton) VALUES ('Carmen', 1);
INSERT INTO distritos (nombre, id_canton) VALUES ('Merced', 1);
INSERT INTO distritos (nombre, id_canton) VALUES ('Hospital', 1);
INSERT INTO distritos (nombre, id_canton) VALUES ('Catedral', 1);
INSERT INTO distritos (nombre, id_canton) VALUES ('Zapote', 1);
INSERT INTO distritos (nombre, id_canton) VALUES ('San Francisco de Dos R칤os', 1);
INSERT INTO distritos (nombre, id_canton) VALUES ('Uruca', 1);
INSERT INTO distritos (nombre, id_canton) VALUES ('Mata Redonda', 1);
INSERT INTO distritos (nombre, id_canton) VALUES ('Pavas', 1);
INSERT INTO distritos (nombre, id_canton) VALUES ('Hatillo', 1);
INSERT INTO distritos (nombre, id_canton) VALUES ('San Sebasti치n', 1);


INSERT INTO distritos (nombre, id_canton) VALUES ('Escaz칰', 2);
INSERT INTO distritos (nombre, id_canton) VALUES ('San Antonio', 2);
INSERT INTO distritos (nombre, id_canton) VALUES ('San Rafael', 2);

INSERT INTO distritos (nombre, id_canton) VALUES ('Desamparados', 3);
INSERT INTO distritos (nombre, id_canton) VALUES ('San Miguel', 3);
INSERT INTO distritos (nombre, id_canton) VALUES ('San Juan de Dios', 3);
INSERT INTO distritos (nombre, id_canton) VALUES ('San Rafael Arriba', 3);
INSERT INTO distritos (nombre, id_canton) VALUES ('San Antonio', 3);
INSERT INTO distritos (nombre, id_canton) VALUES ('Frailes', 3);
INSERT INTO distritos (nombre, id_canton) VALUES ('Patarr치', 3);
INSERT INTO distritos (nombre, id_canton) VALUES ('San Crist칩bal', 3);
INSERT INTO distritos (nombre, id_canton) VALUES ('Rosario', 3);
INSERT INTO distritos (nombre, id_canton) VALUES ('Damas', 3);
INSERT INTO distritos (nombre, id_canton) VALUES ('San Rafael Abajo', 3);
INSERT INTO distritos (nombre, id_canton) VALUES ('Gravilias', 3);
INSERT INTO distritos (nombre, id_canton) VALUES ('Los Guido', 3);

INSERT INTO distritos (nombre, id_canton) VALUES ('Santiago', 4);
INSERT INTO distritos (nombre, id_canton) VALUES ('Mercedes Sur', 4);
INSERT INTO distritos (nombre, id_canton) VALUES ('Barbacoas', 4);
INSERT INTO distritos (nombre, id_canton) VALUES ('Grifo Alto', 4);
INSERT INTO distritos (nombre, id_canton) VALUES ('San Rafael', 4);
INSERT INTO distritos (nombre, id_canton) VALUES ('Candelarita', 4);
INSERT INTO distritos (nombre, id_canton) VALUES ('Desamparaditos', 4);
INSERT INTO distritos (nombre, id_canton) VALUES ('San Antonio', 4);
INSERT INTO distritos (nombre, id_canton) VALUES ('Chires', 4);

INSERT INTO distritos (nombre, id_canton) VALUES ('San Marcos', 5);
INSERT INTO distritos (nombre, id_canton) VALUES ('San Lorenzo', 5);
INSERT INTO distritos (nombre, id_canton) VALUES ('San Carlos', 5);

--INSERTS TABLA ESTADOS 

INSERT INTO ESTADOS (ID_ESTADO, DESCRIPCION) VALUES (1,'ACTIVO');
INSERT INTO ESTADOS (ID_ESTADO, DESCRIPCION) VALUES (2,'INACTIVO');
INSERT INTO ESTADOS (ID_ESTADO, DESCRIPCION) VALUES (3,'EN PROCESO');
INSERT INTO ESTADOS (ID_ESTADO, DESCRIPCION) VALUES (4,'NUEVO');
INSERT INTO ESTADOS (ID_ESTADO, DESCRIPCION) VALUES (5,'ENTREGADO');
INSERT INTO ESTADOS (ID_ESTADO, DESCRIPCION) VALUES (6,'CONTESTADA');
INSERT INTO ESTADOS (ID_ESTADO, DESCRIPCION) VALUES (7,'EN CAMINO');
INSERT INTO ESTADOS (ID_ESTADO, DESCRIPCION) VALUES (8,'CANCELADO');

--INSERTS TABLA ROLES 

INSERT INTO ROLES (ID_ROL, DESCRIPCION) VALUES (1,'COMPRADOR');
INSERT INTO ROLES (ID_ROL, DESCRIPCION) VALUES (2,'ADMINISTRADOR');

